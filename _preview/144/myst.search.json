{"version":"1","records":[{"hierarchy":{"lvl1":"Radar Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Radar Cookbook"},"content":"\n\n\n\n\n\n\n\n\n\nThis Project Pythia Cookbook covers the basics of working with weather radar data in Python.","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Radar Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":2},{"hierarchy":{"lvl1":"Radar Cookbook","lvl2":"Motivation"},"content":"This cookbook provides the essential materials to learning how to work with weather radar data using Python.\n\nMost of the curriculum is focused around the Python ARM Toolkit, which is defined as:\n\n“a Python module containing a collection of weather radar algorithms and utilities. Py-ART is used by the Atmospheric Radiation Measurement (ARM) user facility for working with data from a number of its precipitation and cloud radars, but has been designed so that it can be used by others in the radar and atmospheric communities to examine, processes, and analyze data from many types of weather radars.”\n\nOnce you go through this material, you will have the skills to read in radar data, apply data corrections, and visualize your data, building off of the core foundational Python material covered in the \n\nFoundations Book","type":"content","url":"/#motivation","position":3},{"hierarchy":{"lvl1":"Radar Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":4},{"hierarchy":{"lvl1":"Radar Cookbook","lvl2":"Authors"},"content":"Max Grover, \n\nZachary Sherman, \n\nMilind Sharma, \n\nAlfonso Ladino, \n\nCrystal Camron, \n\nTakashi Unuma","type":"content","url":"/#authors","position":5},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":6},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":7},{"hierarchy":{"lvl1":"Radar Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":8},{"hierarchy":{"lvl1":"Radar Cookbook","lvl2":"Structure"},"content":"This cookbook is broken up into two main sections - “Foundations” and “Example Workflows.”","type":"content","url":"/#structure","position":9},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Foundations","lvl2":"Structure"},"type":"lvl3","url":"/#foundations","position":10},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Foundations","lvl2":"Structure"},"content":"The foundational content includes the:\n\nPy-ART Basics - an overview of Py-ART package, how to read in data, and basic plotting functionality\n\nPy-ART Corrections - how to correct your data, especially when dealing with raw radar data\n\nPy-ART Gridding - how to utilize the gridding tools in Py-ART\n\nIf you are new to Py-ART, starting with the basics is a good place to start, and is required to know before moving onto Py-ART Corrections and Py-ART Gridding.","type":"content","url":"/#foundations","position":11},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Example Workflows","lvl2":"Structure"},"type":"lvl3","url":"/#example-workflows","position":12},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Example Workflows","lvl2":"Structure"},"content":"Here, we apply the lessons learned in the foundational material to various analysis workflows, including everything from reading in the data to plotting a beautiful visualization at the end. We include the additional dataset-specific details, focusing on building upon the foundational materials rather than duplicating previous content.","type":"content","url":"/#example-workflows","position":13},{"hierarchy":{"lvl1":"Radar Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":14},{"hierarchy":{"lvl1":"Radar Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\n or on your local machine.","type":"content","url":"/#running-the-notebooks","position":15},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":16},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a \n\n is through\n\n\n, which enables the execution of a\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nFoundations book chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift + Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.","type":"content","url":"/#running-on-binder","position":17},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":18},{"hierarchy":{"lvl1":"Radar Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\nClone the \n\n“radar-cookbook” repositorygit clone https://github.com/ProjectPythia/radar-cookbook.git\n\nMove into the radar-cookbook directorycd radar-cookbook\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate radar-cookbook-dev\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab\n\nAt this point, you can interact with the notebooks! Make sure to check out the \n\n“Getting Started with Jupyter” content from the \n\nPythia Foundations material if you are new to Jupyter or need a refresher.","type":"content","url":"/#running-on-your-own-machine","position":19},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign"},"type":"lvl1","url":"/cacti-data-quality-example","position":0},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign"},"content":"\n\n","type":"content","url":"/cacti-data-quality-example","position":1},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign"},"type":"lvl1","url":"/cacti-data-quality-example#data-quality-check-from-the-cacti-field-campaign","position":2},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign"},"content":"\n\n","type":"content","url":"/cacti-data-quality-example#data-quality-check-from-the-cacti-field-campaign","position":3},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Overview"},"type":"lvl2","url":"/cacti-data-quality-example#overview","position":4},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nHow to access multiple datasets from the Atmospheric Radiation Measurment (ARM) user facility\n\nHow to create a multipanel plot\n\nHow to compare uncorrected vs. corrected data\n\n","type":"content","url":"/cacti-data-quality-example#overview","position":5},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Prerequisites"},"type":"lvl2","url":"/cacti-data-quality-example#prerequisites","position":6},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nMatplotlib Basics\n\nRequired\n\nBasic plotting\n\nIntroduction to Cartopy\n\nHelpful\n\nAdding projections to your plot\n\nPy-ART Basics\n\nRequired\n\nIO/Visualization\n\nPy-ART Corrections\n\nRequired\n\nRadar Corrections\n\n","type":"content","url":"/cacti-data-quality-example#prerequisites","position":7},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Imports"},"type":"lvl2","url":"/cacti-data-quality-example#imports","position":8},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Imports"},"content":"\n\nimport os\n\nimport act\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cartopy.crs as ccrs\nimport pyart\nimport glob\n\n","type":"content","url":"/cacti-data-quality-example#imports","position":9},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Grab Data from the ARM Data Portal"},"type":"lvl2","url":"/cacti-data-quality-example#grab-data-from-the-arm-data-portal","position":10},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Grab Data from the ARM Data Portal"},"content":"One of the better cases of the CACTI field campaign was from November 11, 2018, where several intense storms traversed through the domain.","type":"content","url":"/cacti-data-quality-example#grab-data-from-the-arm-data-portal","position":11},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"The Cloud, Aerosol, and Complex Terrain Interactions (CACTI) Field Campaign","lvl2":"Grab Data from the ARM Data Portal"},"type":"lvl3","url":"/cacti-data-quality-example#the-cloud-aerosol-and-complex-terrain-interactions-cacti-field-campaign","position":12},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"The Cloud, Aerosol, and Complex Terrain Interactions (CACTI) Field Campaign","lvl2":"Grab Data from the ARM Data Portal"},"content":"Data is available from the Atmospheric Radiation Measurment user facility, which helped to lead the CACTI field campaign in the Sierras de Cordoba region of Argentina.\n\nThe data are available from the ARM data portal (\n\nhttps://​adc​.arm​.gov/).\n\nWe are interested in the corrected C-band radar data, which has the original and corrected data, with the datastream name\n\ncorcsapr2cmacppiM1.c1\n\n","type":"content","url":"/cacti-data-quality-example#the-cloud-aerosol-and-complex-terrain-interactions-cacti-field-campaign","position":13},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Use the ARM Live API to Download the Data, using ACT","lvl2":"Grab Data from the ARM Data Portal"},"type":"lvl3","url":"/cacti-data-quality-example#use-the-arm-live-api-to-download-the-data-using-act","position":14},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Use the ARM Live API to Download the Data, using ACT","lvl2":"Grab Data from the ARM Data Portal"},"content":"The Atmospheric Data Community Toolkit (ACT) has a helpful module to interface with the data server:\n\nDownload Data API\n\n","type":"content","url":"/cacti-data-quality-example#use-the-arm-live-api-to-download-the-data-using-act","position":15},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Setup our Download Query","lvl2":"Grab Data from the ARM Data Portal"},"type":"lvl3","url":"/cacti-data-quality-example#setup-our-download-query","position":16},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Setup our Download Query","lvl2":"Grab Data from the ARM Data Portal"},"content":"Before downloading our data, we need to make sure we have an ARM Data Account, and ARM Live token. Both of these can be found using this link:\n\nARM Live Signup\n\nOnce you sign up, you will see your token. Copy and replace that where we have arm_username and arm_password below.\n\narm_username = os.getenv(\"ARM_USERNAME\")\narm_password = os.getenv(\"ARM_PASSWORD\")\n\ndatastream = \"corcsapr2cmacppiM1.c1\"\n\nstart_date = \"2018-11-11T03:00:00\"\nend_date = \"2018-11-11T03:15:00\"\n\ncsapr_files = act.discovery.download_arm_data(arm_username,\n                                          arm_password,\n                                          datastream,\n                                          start_date,\n                                          end_date,\n                                         )\n\n","type":"content","url":"/cacti-data-quality-example#setup-our-download-query","position":17},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Read in and Investigate our Radar Data"},"type":"lvl2","url":"/cacti-data-quality-example#read-in-and-investigate-our-radar-data","position":18},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Read in and Investigate our Radar Data"},"content":"\n\nradar = pyart.io.read(csapr_files[0])\n\n","type":"content","url":"/cacti-data-quality-example#read-in-and-investigate-our-radar-data","position":19},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"List the available fields and plot the corrected and uncorrected data","lvl2":"Read in and Investigate our Radar Data"},"type":"lvl3","url":"/cacti-data-quality-example#list-the-available-fields-and-plot-the-corrected-and-uncorrected-data","position":20},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"List the available fields and plot the corrected and uncorrected data","lvl2":"Read in and Investigate our Radar Data"},"content":"\n\nsorted(list(radar.fields))\n\n","type":"content","url":"/cacti-data-quality-example#list-the-available-fields-and-plot-the-corrected-and-uncorrected-data","position":21},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Plot a Quick-Look of Reflectivity and Velocity","lvl2":"Read in and Investigate our Radar Data"},"type":"lvl3","url":"/cacti-data-quality-example#plot-a-quick-look-of-reflectivity-and-velocity","position":22},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Plot a Quick-Look of Reflectivity and Velocity","lvl2":"Read in and Investigate our Radar Data"},"content":"Let’s start by plotting our reflectivity and velocity fields, using a four panel plot showing the uncorrected and corrected fields. Notice how the data is masked, and the radial velocities are unfolded.\n\nfig = plt.figure(figsize=(12,10))\ndisplay = pyart.graph.RadarDisplay(radar)\nax1 = plt.subplot(221)\ndisplay.plot_ppi(\"reflectivity\", ax=ax1)\n\nax2 = plt.subplot(222)\ndisplay.plot_ppi(\"corrected_reflectivity\", ax=ax2)\n\nax3 = plt.subplot(223)\ndisplay.plot_ppi(\"mean_doppler_velocity\", vmin=-30, vmax=30, cmap='balance', ax=ax3)\n\nax4 = plt.subplot(224)\ndisplay.plot_ppi(\"corrected_velocity\", vmin=-30, vmax=30, cmap='balance', ax=ax4)\n\nplt.tight_layout()\n\n","type":"content","url":"/cacti-data-quality-example#plot-a-quick-look-of-reflectivity-and-velocity","position":23},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Investigate Dual-Pol Variables"},"type":"lvl2","url":"/cacti-data-quality-example#investigate-dual-pol-variables","position":24},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Investigate Dual-Pol Variables"},"content":"Several of the variables in this file are dual-polarization products, meaning it uses pulses in both the horizontal and vertical direction, and derives fields from this additional information.","type":"content","url":"/cacti-data-quality-example#investigate-dual-pol-variables","position":25},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Differential Phase Shift (PhiDP) and Specific Differential Phase (KDP)","lvl2":"Investigate Dual-Pol Variables"},"type":"lvl3","url":"/cacti-data-quality-example#differential-phase-shift-phidp-and-specific-differential-phase-kdp","position":26},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Differential Phase Shift (PhiDP) and Specific Differential Phase (KDP)","lvl2":"Investigate Dual-Pol Variables"},"content":"One of these dual-pol variables is called the Differential Phase Shift (PhiDP), which is the difference in 2-way attenuation for the horizontal and vertical radar pulses moving through some target. This gives us information about the shape and concentration of the features we are interested in! It is also used to calculate the specific differential phase (KDP), which is the gradient in PhiDP, where positive KDP values indicate greater phase shift in the horizontal. Higher values of KDP can indicate an increase in the size and concentration of rain drops.\n\n","type":"content","url":"/cacti-data-quality-example#differential-phase-shift-phidp-and-specific-differential-phase-kdp","position":27},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Compare Uncorrected and Corrected PhiDP and KDP","lvl2":"Investigate Dual-Pol Variables"},"type":"lvl3","url":"/cacti-data-quality-example#compare-uncorrected-and-corrected-phidp-and-kdp","position":28},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Compare Uncorrected and Corrected PhiDP and KDP","lvl2":"Investigate Dual-Pol Variables"},"content":"We start with the uncorrected fields, specific_differential_phase and uncorrected_differential_phase, and compare to the corrected fields filtered_corrected_specific_diff_phase and filtered_corrected_differential_phase.\n\nNotice how much cleaner the corrected fields are, and how the noise has been filtered, leading a more analysis-ready dataset.\n\ndisplay = pyart.graph.RadarMapDisplay(radar)\nfig = plt.figure(figsize=(18,10))\n\n# Extract the latitude and longitude of the radar and use it for the center of the map\nlat_center = round(radar.latitude['data'][0], 2)\nlon_center = round(radar.longitude['data'][0], 2)\n\n# Set the projection - in this case, we use a general PlateCarree projection\nprojection = ccrs.PlateCarree()\n\n# Determine the ticks\nlat_ticks = np.arange(lat_center-2, lat_center+2, .5)\nlon_ticks = np.arange(lon_center-2, lon_center+2, 1.5)\n\nax1 = plt.subplot(231, projection=projection)\ndisplay.plot_ppi_map(\"reflectivity\", 0, resolution='10m', ax=ax1, lat_lines=lat_ticks, lon_lines=lon_ticks)\n\n\nax3 = plt.subplot(232,projection=projection)\ndisplay.plot_ppi_map(\"differential_phase\", 0, resolution='10m', ax=ax3, vmin=0, vmax=360, lat_lines=lat_ticks, lon_lines=lon_ticks)\n\nax3 = plt.subplot(233,projection=projection)\ndisplay.plot_ppi_map(\"specific_differential_phase\", 0, resolution='10m', ax=ax3, vmin=-1, vmax=4, cmap='Carbone42', lat_lines=lat_ticks, lon_lines=lon_ticks)\n\nax4 = plt.subplot(234, projection=projection)\ndisplay.plot_ppi_map(\"corrected_reflectivity\", 0, resolution='10m', ax=ax4, lat_lines=lat_ticks, lon_lines=lon_ticks)\n\n\nax5 = plt.subplot(235, projection=projection)\ndisplay.plot_ppi_map(\"filtered_corrected_differential_phase\", 0, resolution='10m', ax=ax5, vmin=0, vmax=360, cmap='Wild25', lat_lines=lat_ticks, lon_lines=lon_ticks)\n\nax6 = plt.subplot(236,projection=projection)\ndisplay.plot_ppi_map(\"filtered_corrected_specific_diff_phase\", 0, resolution='10m', ax=ax6, vmin=0, vmax=4, cmap='Carbone42', lat_lines=lat_ticks, lon_lines=lon_ticks)\n\nplt.tight_layout()\nplt.savefig('phidp_kdp_comparison_cacti.png', dpi=300, transparent=False)\n\n","type":"content","url":"/cacti-data-quality-example#compare-uncorrected-and-corrected-phidp-and-kdp","position":29},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Create a Three Panel Figure Visualizing Reflectivity, Gate ID, and KDP","lvl2":"Investigate Dual-Pol Variables"},"type":"lvl3","url":"/cacti-data-quality-example#create-a-three-panel-figure-visualizing-reflectivity-gate-id-and-kdp","position":30},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"Create a Three Panel Figure Visualizing Reflectivity, Gate ID, and KDP","lvl2":"Investigate Dual-Pol Variables"},"content":"Now that we understand how valuable these corrections can be, let’s create a summary figure, giving a quick overview of the scatterers and associated polarimetric fields.\n\ndisplay = pyart.graph.RadarMapDisplay(radar)\nfig = plt.figure(figsize=(18,5))\n\n# Extract the latitude and longitude of the radar and use it for the center of the map\nlat_center = round(radar.latitude['data'][0], 2)\nlon_center = round(radar.longitude['data'][0], 2)\n\nprojection = ccrs.PlateCarree()\n\n# Determine the ticks\nlat_ticks = np.arange(lat_center-2, lat_center+2, .5)\nlon_ticks = np.arange(lon_center-2, lon_center+2, .5)\n\nax1 = plt.subplot(131, projection=projection)\ndisplay.plot_ppi_map(\"corrected_reflectivity\", 0, resolution='10m', ax=ax1, lat_lines=lat_ticks, lon_lines=lon_ticks)\n\n\nax2 = plt.subplot(132, projection=projection)\ngate_ids = radar.fields[\"gate_id\"][\"flag_meanings\"].split(\" \")\nticks = np.arange(len(gate_ids))\nboundaries = np.arange(-0.5, len(gate_ids))\nnorm = mpl.colors.BoundaryNorm(boundaries, 256)\ndisplay.plot_ppi_map(\"gate_id\", 0, ax=ax2, lat_lines=lat_ticks, resolution='10m', lon_lines=lon_ticks, cmap='LangRainbow12', ticks=ticks, norm=norm, ticklabs=gate_ids)\n\nax3 = plt.subplot(133,projection=projection)\ndisplay.plot_ppi_map(\"filtered_corrected_specific_diff_phase\", 0, resolution='10m', ax=ax3, vmin=0, vmax=4, cmap='Carbone42', lat_lines=lat_ticks, lon_lines=lon_ticks)\n\nplt.tight_layout()\nplt.savefig('three_panel_summary_cacti.png', dpi=300, transparent=False)\n\n","type":"content","url":"/cacti-data-quality-example#create-a-three-panel-figure-visualizing-reflectivity-gate-id-and-kdp","position":31},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Summary"},"type":"lvl2","url":"/cacti-data-quality-example#summary","position":32},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Summary"},"content":"Within this example, we walked through how to access ARM data from a field campaign in Argentina, plot a quick look of the data, and compare corrected and uncorrected dual-pol variables!","type":"content","url":"/cacti-data-quality-example#summary","position":33},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"What’s Next?","lvl2":"Summary"},"type":"lvl3","url":"/cacti-data-quality-example#whats-next","position":34},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl3":"What’s Next?","lvl2":"Summary"},"content":"We will showcase other data workflow examples, including field campaigns in other regions and data access methods from other data centers.\n\n","type":"content","url":"/cacti-data-quality-example#whats-next","position":35},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Resources and References"},"type":"lvl2","url":"/cacti-data-quality-example#resources-and-references","position":36},{"hierarchy":{"lvl1":"Data Quality Check from the CACTI Field Campaign","lvl2":"Resources and References"},"content":"ARM Data Discovery\n\nCACTI Field Campaign\n\nCSAPR Radar Data:\n\nBharadwaj, N., Collis, S., Hardin, J., Isom, B., Lindenmaier, I., Matthews, A., & Nelson, D. C-Band Scanning ARM Precipitation Radar (CSAPR2CFR). Atmospheric Radiation Measurement (ARM) User Facility. \n\nBharadwaj et al. (2021)\n\nPy-ART:\n\nHelmus, J.J. & Collis, S.M., (2016). The Python ARM Radar Toolkit (Py-ART), a Library for Working with Weather Radar Data in the Python Programming Language. Journal of Open Research Software. 4(1), p.e25. DOI: \n\nHelmus & Collis (2016)\n\nACT:\n\nAdam Theisen, Ken Kehoe, Zach Sherman, Bobby Jackson, Alyssa Sockol, Corey Godine, Max Grover, Jason Hemedinger, Jenni Kyrouac, Maxwell Levin, Michael Giansiracusa (2022). The Atmospheric Data Community Toolkit (ACT). Zenodo. DOI: \n\nTheisen et al. (2022)","type":"content","url":"/cacti-data-quality-example#resources-and-references","position":37},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:"},"type":"lvl1","url":"/echo-top-height","position":0},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:"},"content":"An echo top is the radar indicated top of an area of precipitation. This notebook demonstrates how to calculate the echo top height (ETH) in a NEXRAD PPI volume scan to determine the maximum elevation angle at which a certain reflectivity threshold is exceeded.\n\nThis example uses the echo top height (ETH) calculation code written by \n\nValentin Louf, available at this \n\ngithub repository.\n\n\n\n","type":"content","url":"/echo-top-height","position":1},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Overview"},"type":"lvl2","url":"/echo-top-height#overview","position":2},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Overview"},"content":"The notebook applies the modified ETH algorithm proposed by \n\nLakshmanan et al. (2013) to a NEXRAD PPI volume scan.\n\nThe modified algorithm comprises these steps:\n\nFind the maximum elevation angle (\\theta_{b}) where reflectivity (Z_{b}) exceeds the echo-top reflectivity threshold.\nIf \\theta_{b} is not the highest elevation scan in the virtual volume, obtain the reflectivity value (Z_{a}) at the next higher elevation angle (\\theta_{a}). Then, the echo-top height is given by the height of the radar beam at an elevation angle:\\theta_T = (Z_T - Z_a) \\frac{\\theta_b - \\theta_a}{Z_b - Z_a} + \\theta_b\n\nwhere Z_T is the threshold value (e.g., 0 dBZ, 18 dBZ) used to compute the echo top.\n\nIf \\theta_{b} is the highest elevation scan available, set \\theta_{T} = \\theta_{b} + \\beta/2, where β is the half-power beamwidth. This condition is met far away from the radar if higher-elevation scans have shorter ranges than a base “surveillance” scan and very close to the radar if the highest-elevation scan does not sample the top of the cloud. Under these circumstances, \\theta_{T} is set to be the top of the beam containing dBZ \\geq Z_T; that is, the traditional echo-top algorithm is followed when there are no data available from a higher-elevation scan.\n\n","type":"content","url":"/echo-top-height#overview","position":3},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Prerequisites"},"type":"lvl2","url":"/echo-top-height#prerequisites","position":4},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nMatplotlib Basics\n\nRequired\n\nBasic plotting\n\nIntro to Cartopy\n\nRequired\n\nGeospatial plotting\n\nPy-ART Basics\n\nRequired\n\nIO/Visualization\n\nNumba\n\nHelpful\n\nFamiliarity with vectorization/optimization of Python functions\n\nTime to learn: 25 minutes\n\n","type":"content","url":"/echo-top-height#prerequisites","position":5},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Imports"},"type":"lvl2","url":"/echo-top-height#imports","position":6},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Imports"},"content":"\n\nimport pyart\nimport numpy as np\nfrom echotop import cloud_top_height, grid_cloud_top\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\n\n","type":"content","url":"/echo-top-height#imports","position":7},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Define our function to compute ETH on a uniform x-y grid"},"type":"lvl2","url":"/echo-top-height#define-our-function-to-compute-eth-on-a-uniform-x-y-grid","position":8},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Define our function to compute ETH on a uniform x-y grid"},"content":"The input file can be a Next Generation Weather Radar (NEXRAD) archive file from Amazon Web Services. We will remotely access  this file and use a reflectivity threshold eth_thld to define our echo tops.\n\ndef compute_eth(infile, eth_thld=0):\n    \"\"\"\n    Compute the Echo Top Height on a grid\n    \n    Parameters\n    ==========\n    infile (str): Filename of NEXRAD Level 2 Archive file. The files hosted by\n    at the NOAA National Climate Data Center [1]_ as well as on the\n    UCAR THREDDS Data Server [2]_ have been tested. Other NEXRAD\n    Level 2 Archive files may or may not work. Message type 1 file\n    and message type 31 files are supported.\n    \n    eth_thld (float): Reflectivity threshold for which we want to compute \n    the echo top height.\n        \n    Returns:\n    ========\n    cth_grid: ndarray <x, y>\n        Echo top height on a grid of dimension (x, y).  \n        \n    References\n    ----------\n    .. [1] http://www.ncdc.noaa.gov/\n    .. [2] http://thredds.ucar.edu/thredds/catalog.html\n    \"\"\"\n    # Reading NEXRAD L2 data stored on AWS cloud\n    \n    radar = pyart.io.read_nexrad_archive(infile)\n\n    r = radar.range['data']\n    azimuth = radar.azimuth['data']\n    elevation = radar.elevation['data']\n    refl = np.array(radar.fields['reflectivity']['data'])\n    st_sweep = radar.sweep_start_ray_index['data']\n    ed_sweep = radar.sweep_end_ray_index['data']\n\n    # Compute ETH. The 'echotop' package uses @jit decorator to optimize \n    # the 'cloud_top_height' function\n    cth = cloud_top_height(r, azimuth, elevation, st_sweep, ed_sweep, refl, eth_thld=eth_thld)\n\n    # Grid data\n    th = 450 - azimuth[slice(st_sweep[0], ed_sweep[0] + 1)]\n    th[th < 0] += 360\n\n    R, A = np.meshgrid(r, th)\n    x = R * np.cos(np.pi * A / 180)\n    y = R * np.sin(np.pi * A / 180)\n\n    xgrid = np.arange(-MAX_RANGE, MAX_RANGE + RANGE_STEP / 2, RANGE_STEP).astype(np.int32)\n    [X, Y] = np.meshgrid(xgrid, xgrid)\n    cth_grid = grid_cloud_top(\n        cth, x, y, X, Y, nnearest=24, maxdist=2500\n    )  # nearest=24 should be enough to sample out to 2500m on a 1000m grid\n    cth_grid = np.ma.masked_invalid(cth_grid).astype(np.int32).filled(FILLVALUE)\n\n    return cth_grid\n\n","type":"content","url":"/echo-top-height#define-our-function-to-compute-eth-on-a-uniform-x-y-grid","position":9},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Read and plot reflectivity and velocity fields for a sample file"},"type":"lvl2","url":"/echo-top-height#read-and-plot-reflectivity-and-velocity-fields-for-a-sample-file","position":10},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Read and plot reflectivity and velocity fields for a sample file"},"content":"\n\naws_nexrad_level2_file = (\n    \"s3://noaa-nexrad-level2/2022/03/22/KHGX/KHGX20220322_120125_V06\"\n)\n\nradar = pyart.io.read_nexrad_archive(aws_nexrad_level2_file)\n\n\nfig = plt.figure(figsize=(12, 4))\ndisplay = pyart.graph.RadarMapDisplay(radar)\n\nax = plt.subplot(121, projection=ccrs.PlateCarree())\n\ndisplay.plot_ppi_map(\n    \"reflectivity\",\n    sweep=0,\n    ax=ax,\n    colorbar_label=\"Equivalent Relectivity ($Z_{e}$) \\n (dBZ)\",\n    vmin=-20,\n    vmax=60,\n)\n\nax = plt.subplot(122, projection=ccrs.PlateCarree())\n\ndisplay.plot_ppi_map(\n    \"velocity\",\n    sweep=1,\n    ax=ax,\n    colorbar_label=\"Radial Velocity ($V_{r}$) \\n (m/s)\",\n    vmin=-70,\n    vmax=70,\n)\n\n","type":"content","url":"/echo-top-height#read-and-plot-reflectivity-and-velocity-fields-for-a-sample-file","position":11},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Define some global constants and compute the ETH on a horizontally uniform grid"},"type":"lvl2","url":"/echo-top-height#define-some-global-constants-and-compute-the-eth-on-a-horizontally-uniform-grid","position":12},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Define some global constants and compute the ETH on a horizontally uniform grid"},"content":"These constants are required by the compute_eth function to grid the data from polar coordinates to a horizontally uniform grid. These three constants are defined as:\n\nFILLVALUE (Value to replace missing data)RANGE_STEP (Uniform horizontal grid spacing in x and y dimensions)MAX_RANGE (Maximum range up to which ETH to be calculated from gridded data)\n\nFILLVALUE: int = -9999 \nRANGE_STEP: int = 1000 \nMAX_RANGE: float = 250e3 \n\ncth_grid = compute_eth(aws_nexrad_level2_file, eth_thld=20)\n\n","type":"content","url":"/echo-top-height#define-some-global-constants-and-compute-the-eth-on-a-horizontally-uniform-grid","position":13},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Plot the gridded echo/cloud top height using matplotlib"},"type":"lvl2","url":"/echo-top-height#plot-the-gridded-echo-cloud-top-height-using-matplotlib","position":14},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Plot the gridded echo/cloud top height using matplotlib"},"content":"\n\np = plt.pcolormesh(cth_grid,\n                   vmin=0,\n                   vmax=15000,\n                   cmap='ChaseSpectral')\n\nplt.colorbar(mappable=p)\n\n\n\n","type":"content","url":"/echo-top-height#plot-the-gridded-echo-cloud-top-height-using-matplotlib","position":15},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Summary"},"type":"lvl2","url":"/echo-top-height#summary","position":16},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Summary"},"content":"Within this example, we walked through how to access ARM data from a field campaign in Texas, plot a quick look of the RHI scan data, and grid our RHI data from native (polar) coordinates to a uniform range-height Caretsian grid.\n\n","type":"content","url":"/echo-top-height#summary","position":17},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Resources and References"},"type":"lvl2","url":"/echo-top-height#resources-and-references","position":18},{"hierarchy":{"lvl1":"Echo top height calculation from NEXRAD PPI volume data:","lvl2":"Resources and References"},"content":"NOAA NEXRAD on AWS\n\nRead NEXRAD on AWS\n\nPy-ART:\n\nHelmus, J.J. & Collis, S.M., (2016). The Python ARM Radar Toolkit (Py-ART), a Library for Working with Weather Radar Data in the Python Programming Language. Journal of Open Research Software. 4(1), p.e25. DOI: \n\nHelmus & Collis (2016)\n\nEcho-top height algorithm:\n\nLakshmanan, V., Hondl, K., Potvin, C. K., & Preignitz, D. (2013). An improved method for estimating radar echo-top height. Weather and Forecasting, 28(2), 481-488. DOI: \n\nLakshmanan et al. (2013)","type":"content","url":"/echo-top-height#resources-and-references","position":19},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example"},"type":"lvl1","url":"/fastbarnes-interpolation-rhi","position":0},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example"},"content":"This example uses the Fast Barnes interpolation methods as presented in \n\nZürcher (2023) available at \n\nfast-barnes-py.\n\nThe notebook applies the fast Barnes interpolation methods to RHI scan data from the ARM-CSAPR2 radar data from the [TRACER] (\n\nhttps://​www​.arm​.gov​/research​/campaigns​/amf2021tracer) field campaign.\n\n\n\n","type":"content","url":"/fastbarnes-interpolation-rhi","position":1},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Overview"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#overview","position":2},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Overview"},"content":"This notebook shows how to download the ARM-CSAPR2 RHI data from ARM data repository and grid radar variables on a two-dimensional Cartesian grid using Python.\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#overview","position":3},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Prerequisites"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#prerequisites","position":4},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nIntro to Xarray\n\nNecessary\n\n\n\nMatplotlib Basics\n\nRequired\n\nBasic plotting\n\nPy-ART Basics\n\nRequired\n\nIO/Visualization\n\nUnderstanding of NetCDF\n\nHelpful\n\nFamiliarity with metadata structure\n\nTime to learn: 10 minutes\n\n\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#prerequisites","position":5},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Imports"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#imports","position":6},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Imports"},"content":"\n\nimport pyart\nimport act\nimport glob\nimport os\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom copy import deepcopy\nfrom fastbarnes.interpolation import barnes\nfrom datetime import timedelta\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#imports","position":7},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Setup our Download Query"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#setup-our-download-query","position":8},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Setup our Download Query"},"content":"Before downloading our data, we need to make sure we have an ARM Data Account, and ARM Live token. Both of these can be found using this link:\n\nARM Live Signup\n\nOnce you sign up, you will see your token. Copy and replace that where we have arm_username and arm_password below.\n\narm_username = os.getenv(\"ARM_USERNAME\")\narm_password = os.getenv(\"ARM_PASSWORD\")\n\ndatastream = \"houcsapr2cfrS2.a1\"\n\nstart_date = \"2022-08-07T18:39:04\"\nend_date = \"2022-08-07T18:39:05\"\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#setup-our-download-query","position":9},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Grab Data"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#grab-data","position":10},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Grab Data"},"content":"We use the ARM Live API, accessible through ACT!\n\nDownload Data API\n\nWe are interested in the C-band radar, which is utilizing a cell-tracking algorithm, with the datastream\n\nhoucsapr2cfrS2.a1\n\nOne of the better cases was from June 2, 2022.\n\nThis line will download data into the a new directory with the datastream name (/houcsapr2cfrS2.a1)\n\naug7_csapr_files = act.discovery.download_arm_data(arm_username,\n                                               arm_password,\n                                               datastream,\n                                               start_date,\n                                               end_date)\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#grab-data","position":11},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Read in and Plot the Data"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#read-in-and-plot-the-data","position":12},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Read in and Plot the Data"},"content":"Before following running the next cells, make sure you have created the following directories:\n\nquicklooks\n\n!mkdir quicklooks\n\nradar_file = \"houcsapr2cfrS2.a1/houcsapr2cfrS2.a1.20220807.183904.nc\"\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#read-in-and-plot-the-data","position":13},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Plot one of the RHI scans"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#plot-one-of-the-rhi-scans","position":14},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Plot one of the RHI scans"},"content":"We read in the data corresponding to 7 August 2022 18:39:04 UTC, and plot a basic RadarDisplay which will automatically detect whether the plot is a vertical cross section (RHI or VPT), or a horizontal scan (PPI)\n\nradar = pyart.io.read(radar_file)\ndisplay = pyart.graph.RadarDisplay(radar)\ndisplay.plot(\"reflectivity\", 0)\nplt.savefig(f\"quicklooks/{Path(radar_file).stem}.png\", dpi=200)\nplt.xlim(0,45)\nplt.ylim(0,12)\nplt.show()\nplt.close() \n\n","type":"content","url":"/fastbarnes-interpolation-rhi#plot-one-of-the-rhi-scans","position":15},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Define a function to grid the RHI data from polar (antenna) coordinates to a two-dimensional Caretsian grid"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#define-a-function-to-grid-the-rhi-data-from-polar-antenna-coordinates-to-a-two-dimensional-caretsian-grid","position":16},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Define a function to grid the RHI data from polar (antenna) coordinates to a two-dimensional Caretsian grid"},"content":"We use numba to vectorize the dist_func function to calculate the distance of each range gate from the radar. This makes our code run faster than simply executing this function for each gate in a for loop.\n\nNext, we use the barnes function from the fastbarnes Python package to interpolate the radar fields such as equivalent reflectivity factor (Z_{H}), differential_reflectivity (Z_{DR}), and specific_differential_phase (K_{DP}) to a uniform range-height Cartesian grid.\n\ndef grid_rhi(file,z_res = 100,rng_res = 100,z_limits = (0,15000),rng_limits = (0,109900.0),fields=None):\n    \n    \"\"\"\n    Input:\n    -------\n    file (str): Path of the RHI scan file that needs to be gridded.\n    z_res (float): Vertical grid spacing of the Cartesian grid.\n    rng_res (float): Horizontal grid spacing of the Cartesian grid.\n    z_limits (tuple): Lower and upper height limits within which radar data needs to be gridded. \n    rng_limits (tuple): Lower and upper range limits within which radar data needs to be gridded. \n    \n    Output:\n    -------\n    grid_ds (xarray Dataset): Xarray dataset containing radar fields on the Cartesian grid\n    \"\"\"\n    \n    z_pts = np.arange(z_limits[0],z_limits[1]+z_res,z_res)\n    rng_pts = np.arange(rng_limits[0],rng_limits[1]+rng_res,rng_res)\n   \n    \n    rhi = xr.open_dataset(file)\n    radar = pyart.io.read(file)\n    rhi = rhi.swap_dims({'time':'elevation'})\n\n    lat = float(radar.latitude[\"data\"])\n    lon = float(radar.longitude[\"data\"])\n\n    grid_origin = (lat, lon)\n    grid_origin_lat, grid_origin_lon = grid_origin\n\n    grid_projection = {\"proj\": \"aeqd\", \"_include_lon_0_lat_0\": True}\n    projparams = grid_projection.copy()\n\n    if projparams.pop(\"_include_lon_0_lat_0\", False):\n        projparams[\"lon_0\"] = grid_origin_lon\n        projparams[\"lat_0\"] = grid_origin_lat\n\n    rg_loc = np.tile(radar.range['data'],len(radar.elevation['data'])).reshape(len(radar.elevation['data']),len(radar.range['data']))\n\n    zg_loc = radar.gate_altitude[\"data\"] - 12 # CSAPR2 antenna altitude = 12 m in this example\n\n     \n    # one of [ 'naive', 'radius', 'convolution', 'optimized_convolution' ]\n    method = \"optimized_convolution\"\n\n    # one of [ 0.25, 0.5, 1.0, 2.0, 4.0 ]\n    sigma = 1.0\n\n    # applies only to 'convolution' interpolations: one of [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 50 ]\n    num_iter = 4\n    \n    if fields is None:\n        fields = ['reflectivity','differential_reflectivity','specific_differential_phase',\n                  'copol_correlation_coeff','mean_doppler_velocity','spectral_width']\n        \n    res_field = np.empty((len(z_pts),len(rng_pts),len(fields)))\n\n    for j in range(len(fields)):\n\n        data = deepcopy(np.array(radar.fields[fields[j]]['data']))\n        # data = data.filled(np.nan)\n\n        res_field[:,:,j] = barnes(np.asarray([rg_loc.ravel(),radar.gate_altitude['data'].ravel()]),\n                           data.ravel(),\n                           100,\n                           np.asarray([0,0]),\n                           100,\n                           (len(z_pts),len(rng_pts)),\n                           method=method,\n                           num_iter = num_iter,\n                           min_weight=0.0002\n                          )\n    \n\n    data_dict = {}\n    for k in range(len(fields)):\n        data_dict[fields[k]] = ([\"z\",\"range\"],res_field[:,:,k])\n\n    grid_ds = xr.Dataset(data_vars=data_dict,\n                         coords=dict(z=([\"z\"], z_pts),\n                                     range=([\"range\"],rng_pts),\n                                    ),\n                         attrs=dict(description=\"Gridded RHI data.\"),\n                        )\n        \n    return grid_ds\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#define-a-function-to-grid-the-rhi-data-from-polar-antenna-coordinates-to-a-two-dimensional-caretsian-grid","position":17},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl3":"Apply the gridding function to your radar RHI data file","lvl2":"Define a function to grid the RHI data from polar (antenna) coordinates to a two-dimensional Caretsian grid"},"type":"lvl3","url":"/fastbarnes-interpolation-rhi#apply-the-gridding-function-to-your-radar-rhi-data-file","position":18},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl3":"Apply the gridding function to your radar RHI data file","lvl2":"Define a function to grid the RHI data from polar (antenna) coordinates to a two-dimensional Caretsian grid"},"content":"Now, we are ready to grid the RHI data. The grid_rhi function requires the user to specify the vertical and horizontal grid spacing (z_res and rng_res, respectively), as well as the lower and upper limits of the Cartesian grid in the vertical and horizontal dimensions (z_limits and rng_limits, respectively). Custom fields of interest can be specified through the fields parameter. Otherwise, the function grids five radar fields by default i.e., (Z_{H}, Z_{DR}, \\rho_{hv}, K_{DP}, and σ).\n\ngrid_ds = grid_rhi(radar_file)\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#apply-the-gridding-function-to-your-radar-rhi-data-file","position":19},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Grid and plot the RHI data"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#grid-and-plot-the-rhi-data","position":20},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Grid and plot the RHI data"},"content":"\n\n# Finally, plot the gridded reflectivity\nfig,ax = plt.subplots()\ngrid_ds['reflectivity'].plot(vmin=0,vmax=70,cmap='HomeyerRainbow',ax=ax)\nax.set_xlim(0,55000)\nax.set_ylim(0,10000)\nplt.show()\n\n\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#grid-and-plot-the-rhi-data","position":21},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Summary"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#summary","position":22},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Summary"},"content":"Within this example, we walked through how to access ARM data from a field campaign in Texas, plot a quick look of the RHI scan data, and grid our RHI data from native (polar) coordinates to a uniform range-height Caretsian grid.\n\n","type":"content","url":"/fastbarnes-interpolation-rhi#summary","position":23},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Resources and References"},"type":"lvl2","url":"/fastbarnes-interpolation-rhi#resources-and-references","position":24},{"hierarchy":{"lvl1":"2D objective analysis of weather radar RHI scan: Fast Barnes Interpolation Example","lvl2":"Resources and References"},"content":"ARM Data Discovery\n\nTRACER Field Campaign\n\nCSAPR Radar Data:\n\nBharadwaj, N., Collis, S., Hardin, J., Isom, B., Lindenmaier, I., Matthews, A., & Nelson, D. C-Band Scanning ARM Precipitation Radar (CSAPR2CFR). Atmospheric Radiation Measurement (ARM) User Facility. \n\nBharadwaj et al. (2021)\n\nPy-ART:\n\nHelmus, J.J. & Collis, S.M., (2016). The Python ARM Radar Toolkit (Py-ART), a Library for Working with Weather Radar Data in the Python Programming Language. Journal of Open Research Software. 4(1), p.e25. DOI: \n\nHelmus & Collis (2016)\n\nACT:\n\nAdam Theisen, Ken Kehoe, Zach Sherman, Bobby Jackson, Alyssa Sockol, Corey Godine, Max Grover, Jason Hemedinger, Jenni Kyrouac, Maxwell Levin, Michael Giansiracusa (2022). The Atmospheric Data Community Toolkit (ACT). Zenodo. DOI: \n\nTheisen et al. (2022)","type":"content","url":"/fastbarnes-interpolation-rhi#resources-and-references","position":25},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison"},"type":"lvl1","url":"/kdp-comparison","position":0},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison"},"content":"\n\n","type":"content","url":"/kdp-comparison","position":1},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison"},"type":"lvl1","url":"/kdp-comparison#specific-differential-phase-k-dp-retrieval-methods-comparison","position":2},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison"},"content":"\n\n","type":"content","url":"/kdp-comparison#specific-differential-phase-k-dp-retrieval-methods-comparison","position":3},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Overview"},"type":"lvl2","url":"/kdp-comparison#overview","position":4},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nHow to access Colombian national weather radar network data from AWS\n\nHow to read and create a multipanel plot\n\nHow to retrieve and compare three different methods\n\n","type":"content","url":"/kdp-comparison#overview","position":5},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Prerequisites"},"type":"lvl2","url":"/kdp-comparison#prerequisites","position":6},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nMatplotlib Basics\n\nRequired\n\nBasic plotting\n\nIntroduction to Cartopy\n\nHelpful\n\nAdding projections to your plot\n\nPy-ART Basics\n\nRequired\n\nIO/Visualization\n\nPy-ART Corrections\n\nRequired\n\nRadar Corrections\n\nPy-ART Example-workflows\n\nRequired\n\nDual-polarization variables\n\n","type":"content","url":"/kdp-comparison#prerequisites","position":7},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Imports"},"type":"lvl2","url":"/kdp-comparison#imports","position":8},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Imports"},"content":"\n\nimport xradar as xd\nimport pyart\nimport xarray as xr\nimport numpy as np\nimport fsspec\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nfrom open_radar_data import DATASETS\nimport matplotlib.ticker as mticker\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n","type":"content","url":"/kdp-comparison#imports","position":9},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"How to access Colombian national weather radar network data from AWS"},"type":"lvl2","url":"/kdp-comparison#how-to-access-colombian-national-weather-radar-network-data-from-aws","position":10},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"How to access Colombian national weather radar network data from AWS"},"content":"Let’s start first with Level 2 radar data, which is ground-based radar data collected by the Instituto de Hidrología, Meteorología y Estudios Ambientales (IDEAM).\n\n","type":"content","url":"/kdp-comparison#how-to-access-colombian-national-weather-radar-network-data-from-aws","position":11},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Level 2 Data","lvl2":"How to access Colombian national weather radar network data from AWS"},"type":"lvl3","url":"/kdp-comparison#level-2-data","position":12},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Level 2 Data","lvl2":"How to access Colombian national weather radar network data from AWS"},"content":"Level 2 data includes all of the fields in a single file - for example, a file may include:\n\nReflectivity\n\nVelocity\n\nDifferential reflectivity\n\n","type":"content","url":"/kdp-comparison#level-2-data","position":13},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Search for data during a Mesoscale Convective System - MCS event (August 9, 2022)","lvl2":"How to access Colombian national weather radar network data from AWS"},"type":"lvl3","url":"/kdp-comparison#search-for-data-during-a-mesoscale-convective-system-mcs-event-august-9-2022","position":14},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Search for data during a Mesoscale Convective System - MCS event (August 9, 2022)","lvl2":"How to access Colombian national weather radar network data from AWS"},"content":"We will access data from the radaresideam bucket, with the data organized as:s3://s3-radaresideam/l2_data/year/month/date/radar_name/{radar_name[:3].upper()}{year}{month}{date}{hour}{minute}{second}.RAW*\n\nWe can use \n\nfsspec, a tool to work with filesystems in Python, to search through the bucket to find our files!\n\nWe start first by setting up our \n\nAWS S3 filesystem\n\nfs = fsspec.filesystem(\"s3\", anon=True)\n\nNow, we can list files from August 9, 2022, from Carimagua radar (CAR), around 1900 UTC.\n\nfiles = sorted(fs.glob(\"s3-radaresideam/l2_data/2022/08/09/Carimagua/CAR22080919*\"))\nfiles[:4]\n\n","type":"content","url":"/kdp-comparison#search-for-data-during-a-mesoscale-convective-system-mcs-event-august-9-2022","position":15},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Read the data into Py-ART"},"type":"lvl2","url":"/kdp-comparison#read-the-data-into-py-art","position":16},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Read the data into Py-ART"},"content":"When reading into Py-ART, we can use the pyart.io.read_sigmet or pyart.io.read module to read in our data.\n\nradar = pyart.io.read_sigmet(f's3://{files[7]}')\n\n","type":"content","url":"/kdp-comparison#read-the-data-into-py-art","position":17},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"List the available fields","lvl2":"Read the data into Py-ART"},"type":"lvl3","url":"/kdp-comparison#list-the-available-fields","position":18},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"List the available fields","lvl2":"Read the data into Py-ART"},"content":"\n\nsorted(list(radar.fields))\n\n","type":"content","url":"/kdp-comparison#list-the-available-fields","position":19},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Plot dual-pol variables","lvl2":"Read the data into Py-ART"},"type":"lvl3","url":"/kdp-comparison#plot-dual-pol-variables","position":20},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Plot dual-pol variables","lvl2":"Read the data into Py-ART"},"content":"Let’s plot the radar reflectivity (Z), differential reflectivity (Z_{DR}), specific differential phase (K_{DP}), and cross correlation ratio (\\rho_{HV}) using a four panel plot.\n\nfig = plt.figure(figsize=(12,10))\ndisplay = pyart.graph.RadarMapDisplay(radar)\n# Extract the latitude and longitude of the radar and use it for the center of the map\nlat_center = round(radar.latitude['data'][0], 0)\nlon_center = round(radar.longitude['data'][0], 0)\n\n\n# Determine the ticks\nlat_ticks = np.arange(lat_center-3, lat_center+3, 1.5)\nlon_ticks = np.arange(lon_center-3, lon_center+3, 1.5)\n\n# Set the projection - in this case, we use a general PlateCarree projection\nprojection = ccrs.PlateCarree()\nax1 = plt.subplot(221, projection=projection)\ndisplay.plot_ppi_map(\"reflectivity\", 0, \n                     resolution='10m', \n                     ax=ax1, \n                     lat_lines=lat_ticks, \n                     lon_lines=lon_ticks)\n\nax2 = plt.subplot(222, projection=projection)\ndisplay.plot_ppi_map(\"differential_reflectivity\", 0, \n                     resolution='10m', \n                     ax=ax2, \n                     lat_lines=lat_ticks, \n                     lon_lines=lon_ticks)\n\nax3 = plt.subplot(223, projection=projection)\ndisplay.plot_ppi_map(\"differential_phase\", 0, \n                     vmin=0, vmax=180,  \n                     ax=ax3, resolution='10m', \n                     lat_lines=lat_ticks, \n                     lon_lines=lon_ticks)\n\nax4 = plt.subplot(224, projection=projection)\ndisplay.plot_ppi_map(\"specific_differential_phase\", 0, \n                     vmin=0, vmax=10,  \n                     ax=ax4, resolution='10m', \n                     lat_lines=lat_ticks, \n                     lon_lines=lon_ticks)\nplt.tight_layout()\n\nWe can notice from the previous figure that this is a intense precipitation event in Colombia with reflectivity values up to +55 dBZ, big raindrops (Z_{DR} +3 dB), heavy rainfall rates with K_{DP} +10 dB/km, and multiples foldings in differential phase (Phi_{DP}). We can notice negative values in the Z_{DR} panel (differential attenuation) in the north-east side of the radar location.\n\n","type":"content","url":"/kdp-comparison#plot-dual-pol-variables","position":21},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"K_{DP} retrieval methods"},"type":"lvl2","url":"/kdp-comparison#k-dp-retrieval-methods","position":22},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"K_{DP} retrieval methods"},"content":"Although the radar data already contains the specific differential phase (K_{DP}), we can use the following alternative methods for comparison:\n\nVariational method by Maesaka et al. (2012).\n\nKalman filter method by Schneebeli and al. (2014)\n\nVulpiani method by Vulpiani et al. (2012)\n\nThe Py-Art Python package includes all the methods mentioned above. We can access the retrieval methods using pyart.retrieve.kdp_maesaka, pyart.retrieve.kdp_schneebeli, and pyart.retrieve.kdp_vulpiani. The output from all retrieval methods is a tuple with two dictionaries that contain the retrieved K_{DP} as well as the Differential phase (Phi_{DP}).\n\n%%time\nkdp_maesaka= pyart.retrieve.kdp_maesaka(radar)\n\n%%time\nkdp_schneebeli = pyart.retrieve.kdp_schneebeli(radar, band='C', parallel=True)\n\n%%time\nkdp_vulpiani = pyart.retrieve.kdp_vulpiani(radar, band='C', parallel=True)\n\nThis is how a dictionary with the retrieve K_{DP} looks like\n\nkdp_vulpiani[0]\n\n","type":"content","url":"/kdp-comparison#k-dp-retrieval-methods","position":23},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Add the new retrieved K_{DP} values to the radar object","lvl2":"K_{DP} retrieval methods"},"type":"lvl3","url":"/kdp-comparison#add-the-new-retrieved-k-dp-values-to-the-radar-object","position":24},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Add the new retrieved K_{DP} values to the radar object","lvl2":"K_{DP} retrieval methods"},"content":"We can add new fields to our Py-Art radar object by using the pyart.core.Radar.add_field method as follows\n\nradar.add_field('kdp_maesaka', kdp_maesaka[0])\nradar.add_field('phidp_maesaka', kdp_maesaka[1])\nradar.add_field('kdp_schneebeli', kdp_schneebeli[0])\nradar.add_field('phidp_schneebeli', kdp_schneebeli[1])\nradar.add_field('kdp_vulpiani', kdp_vulpiani[0])\nradar.add_field('phidp_vulpiani', kdp_vulpiani[1])\n\n","type":"content","url":"/kdp-comparison#add-the-new-retrieved-k-dp-values-to-the-radar-object","position":25},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"List the new fields/variables","lvl2":"K_{DP} retrieval methods"},"type":"lvl3","url":"/kdp-comparison#list-the-new-fields-variables","position":26},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"List the new fields/variables","lvl2":"K_{DP} retrieval methods"},"content":"\n\nsorted(list(radar.fields))\n\n","type":"content","url":"/kdp-comparison#list-the-new-fields-variables","position":27},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Compare default and retrieved Phi_{DP} and K_{DP}","lvl2":"K_{DP} retrieval methods"},"type":"lvl3","url":"/kdp-comparison#compare-default-and-retrieved-phi-dp-and-k-dp","position":28},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"Compare default and retrieved Phi_{DP} and K_{DP}","lvl2":"K_{DP} retrieval methods"},"content":"We can look at the difference between all the methods using a side-by-side comparison figure\n\n# list of the variables to be plotted\nvpol = ['specific_differential_phase', 'kdp_maesaka', 'kdp_schneebeli', 'kdp_vulpiani',\n        'differential_phase', 'phidp_maesaka', 'phidp_schneebeli', 'phidp_vulpiani']\n# list of cmaps\ncmaps = ['Carbone42'] * 4 + ['Wild25'] * 4\n\n# list of maximum values\nvmaxs = [10] * 4 + [180]  * 4 \n\n# list of tltles\ntitles = [r\"$K_{DP} \\ Default$\", r\"$K_{DP} \\ Maesaka$\", r\"$K_{DP} \\ Schneebeli$\", r\"$K_{DP} \\ Vulpiani$\", \n          r\"$Phi_{DP} \\ Default$\", r\"$Phi_{DP} \\ Maesaka$\", r\"$Phi_{DP} \\ Schneebeli$\", r\"$Phi_{DP} \\ Vulpiani$\"]\n\n# display object from PyArt\ndisplay = pyart.graph.RadarMapDisplay(radar)\nfig, axs = plt.subplots(2, 4, figsize=(14,6), subplot_kw={'projection': ccrs.PlateCarree()}, sharey=True, sharex=True)\n\n# Extract the latitude and longitude of the radar and use it for the center of the map\nlat_center = round(radar.latitude['data'][0], 0)\nlon_center = round(radar.longitude['data'][0], 0)\n\n# Set the projection - in this case, we use a general PlateCarree projection\nprojection = ccrs.PlateCarree()\n\n# Determine the ticks\nlat_ticks = np.arange(lat_center-3, lat_center+3, 1.5)\nlon_ticks = np.arange(lon_center-3, lon_center+3, 1.5)\n\n#make axis flatten for iteration\naxis = axs.flatten()\n# Loop to create all plots\nfor idx, ax in enumerate(axis):\n    display.plot_ppi_map(vpol[idx], 0, resolution='10m', ax=ax, \n                         lat_lines=lat_ticks, \n                         lon_lines=lon_ticks,\n                         cmap=cmaps[idx],\n                         vmin=0, \n                         vmax=vmaxs[idx],\n                         colorbar_flag=False, \n                         title_flag=False, \n                         add_grid_lines=False)\n    ax.set_title(titles[idx])\n    gl = ax.gridlines(draw_labels=True, rasterized=True)\n    gl.xlocator = mticker.FixedLocator(lon_ticks)\n    gl.ylabels_right = False\n    gl.xlabels_top = False\n    gl.ylabels_left = False\n    gl.xlabels_bottom = False\n    if (idx == 0) | (idx== 4):\n        gl.ylabels_left = True\n    if  idx>= 4:\n        gl.xlabels_bottom = True\n\nfig.tight_layout()\nfig.colorbar(display.plots[0], ax=axis[:4], pad=.01, label='$Specific \\ differential \\  phase  \\ [deg/km]$')\nfig.colorbar(display.plots[-1], ax=axis[-4:], pad=.01, label='$Differential \\ phase  \\ [deg]$')\n# fig.savefig('../images/kdp_comparison.jpg')\n\nIn the top row, we can see the Specific Differential Phase (K_{DP}), and in the bottom row, the Differential Phase (Phi_{DP}). We can notice that the default K_{DP} shows values +10 deg/km, which we think is too high. On the other hand, Maesake’s and Scneebeli’s methods’ output suggests that they are probably not performing well. However, the Vulpiani method performs better since we can observe more realistic values on K_{DP} and Phi_{DP}.\n\nWarningThis notebook is intended to be demonstrative; therefore, we can not make any conclusions regarding the methods we tested.\n\n","type":"content","url":"/kdp-comparison#compare-default-and-retrieved-phi-dp-and-k-dp","position":29},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Summary"},"type":"lvl2","url":"/kdp-comparison#summary","position":30},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Summary"},"content":"Within this example, we walked through how to access Colombian radar data from IDEAM, plot a quick look of the data, and compare the the specific differential phase using the default and three different methods!","type":"content","url":"/kdp-comparison#summary","position":31},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"What’s Next?","lvl2":"Summary"},"type":"lvl3","url":"/kdp-comparison#whats-next","position":32},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl3":"What’s Next?","lvl2":"Summary"},"content":"We will showcase other data workflow examples, including field campaigns in other regions and data access methods from other data centers.\n\n","type":"content","url":"/kdp-comparison#whats-next","position":33},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Resources and References"},"type":"lvl2","url":"/kdp-comparison#resources-and-references","position":34},{"hierarchy":{"lvl1":"Specific Differential Phase (K_{DP}) retrieval methods comparison","lvl2":"Resources and References"},"content":"IDEAM radar data\n\nPy-ART:\n\nHelmus, J.J. & Collis, S.M., (2016). The Python ARM Radar Toolkit (Py-ART), a Library for Working with Weather Radar Data in the Python Programming Language. Journal of Open Research Software. 4(1), p.e25. DOI: \n\nHelmus & Collis (2016)\n\nACT:\n\nAdam Theisen, Ken Kehoe, Zach Sherman, Bobby Jackson, Alyssa Sockol, Corey Godine, Max Grover, Jason Hemedinger, Jenni Kyrouac, Maxwell Levin, Michael Giansiracusa (2022). The Atmospheric Data Community Toolkit (ACT). Zenodo. DOI: \n\nTheisen et al. (2022)\n\nMaesaka, T., Iwanami, K. and Maki, M., 2012: Non-negative KDP Estimation by Monotone Increasing PHIDP Assumption below Melting Layer. The Seventh European Conference on Radar in Meteorology and Hydrology.\n\nSchneebeli, M., Grazioli, J., and Berne, A., 2014: Improved Estimation of the Specific Differential Phase SHIFT Using a Compilation of Kalman Filter Ensembles, IEEE T. Geosci. Remote Sens., 52, 5137-5149, https://doi:10.1109/TGRS.2013.2287017\n\nGianfranco Vulpiani, Mario Montopoli, Luca Delli Passeri, Antonio G. Gioia, Pietro Giordano, and Frank S. Marzano, 2012: On the Use of Dual-Polarized C-Band Radar for Operational Rainfall Retrieval in Mountainous Areas. J. Appl. Meteor. Climatol., 51, 405-425, doi: \n\nhttps://​10​.1175​/JAMC​-D​-10​-05024.1.","type":"content","url":"/kdp-comparison#resources-and-references","position":35},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma"},"type":"lvl1","url":"/moore-oklahoma-tornado","position":0},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma"},"content":"\n\n","type":"content","url":"/moore-oklahoma-tornado","position":1},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma"},"type":"lvl1","url":"/moore-oklahoma-tornado#looking-at-nexrad-data-from-moore-oklahoma","position":2},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma"},"content":"\n\n","type":"content","url":"/moore-oklahoma-tornado#looking-at-nexrad-data-from-moore-oklahoma","position":3},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Overview"},"type":"lvl2","url":"/moore-oklahoma-tornado#overview","position":4},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nHow to access NEXRAD data from AWS\n\nHow to read this data into Py-ART\n\nHow to customize your plots and maps","type":"content","url":"/moore-oklahoma-tornado#overview","position":5},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Prerequisites"},"type":"lvl2","url":"/moore-oklahoma-tornado#prerequisites","position":6},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nIntro to Cartopy\n\nRequired\n\nProjections and Features\n\nMatplotlib Basics\n\nRequired\n\nBasic plotting\n\nPy-ART Basics\n\nRequired\n\nIO/Visualization\n\nTime to learn: 45 minutes\n\n","type":"content","url":"/moore-oklahoma-tornado#prerequisites","position":7},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Imports"},"type":"lvl2","url":"/moore-oklahoma-tornado#imports","position":8},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Imports"},"content":"\n\nimport pyart\nimport fsspec\nfrom metpy.plots import USCOUNTIES\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n","type":"content","url":"/moore-oklahoma-tornado#imports","position":9},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"How to Access NEXRAD Data from Amazon Web Services (AWS)"},"type":"lvl2","url":"/moore-oklahoma-tornado#how-to-access-nexrad-data-from-amazon-web-services-aws","position":10},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"How to Access NEXRAD Data from Amazon Web Services (AWS)"},"content":"Let’s start first with NEXRAD Level 2 data, which is ground-based radar data collected by the National Oceanic and Atmospheric Administration (NOAA), as a part of the National Weather Service (NWS) observing network.\n\n","type":"content","url":"/moore-oklahoma-tornado#how-to-access-nexrad-data-from-amazon-web-services-aws","position":11},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Level 2 Data","lvl2":"How to Access NEXRAD Data from Amazon Web Services (AWS)"},"type":"lvl3","url":"/moore-oklahoma-tornado#level-2-data","position":12},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Level 2 Data","lvl2":"How to Access NEXRAD Data from Amazon Web Services (AWS)"},"content":"Level 2 data includes all of the fields in a single file - for example, a file may include:\n\nReflectivity\n\nVelocity\n\n","type":"content","url":"/moore-oklahoma-tornado#level-2-data","position":13},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Search for Data from the Moore, Oklahoma Tornado (May 20, 2013)","lvl2":"How to Access NEXRAD Data from Amazon Web Services (AWS)"},"type":"lvl3","url":"/moore-oklahoma-tornado#search-for-data-from-the-moore-oklahoma-tornado-may-20-2013","position":14},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Search for Data from the Moore, Oklahoma Tornado (May 20, 2013)","lvl2":"How to Access NEXRAD Data from Amazon Web Services (AWS)"},"content":"Data We will access data from the noaa-nexrad-level2 bucket, with the data organized as:s3://noaa-nexrad-level2/year/month/date/radarsite/{radarsite}{year}{month}{date}_{hour}{minute}{second}_V06\n\nWe can use \n\nfsspec, a tool to work with filesystems in Python, to search through the bucket to find our files!\n\nWe start first by setting up our \n\nAWS S3 filesystem\n\nfs = fsspec.filesystem(\"s3\", anon=True)\n\nOnce we setup our filesystem, we can list files from May 20, 2013 from the NWS Oklahoma City, Oklahoma (KTLX) site, around 2000 UTC.\n\nfiles = sorted(fs.glob(\"s3://noaa-nexrad-level2/2013/05/20/KTLX/KTLX20130520_20*\"))\nfiles\n\nWe now have a list of files we can read in!\n\n","type":"content","url":"/moore-oklahoma-tornado#search-for-data-from-the-moore-oklahoma-tornado-may-20-2013","position":15},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Read the Data into PyART"},"type":"lvl2","url":"/moore-oklahoma-tornado#read-the-data-into-pyart","position":16},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Read the Data into PyART"},"content":"When reading into PyART, we can use the pyart.io.read_nexrad_archive or pyart.io.read module to read in our data.\n\nradar = pyart.io.read_nexrad_archive(f's3://{files[3]}')\n\nNotice how for the NEXRAD Level 2 data, we have several fields available\n\nlist(radar.fields)\n\n","type":"content","url":"/moore-oklahoma-tornado#read-the-data-into-pyart","position":17},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Plot a quick-look of the dataset","lvl2":"Read the Data into PyART"},"type":"lvl3","url":"/moore-oklahoma-tornado#plot-a-quick-look-of-the-dataset","position":18},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Plot a quick-look of the dataset","lvl2":"Read the Data into PyART"},"content":"Let’s get a quicklook of the reflectivity and velocity fields\n\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('reflectivity',\n                     sweep=3,\n                     vmin=-20,\n                     vmax=60,\n                     projection=ccrs.PlateCarree()\n                    )\n\ndisplay.plot_ppi_map('velocity',\n                     sweep=3,\n                     projection=ccrs.PlateCarree(),\n                    )\n\n","type":"content","url":"/moore-oklahoma-tornado#plot-a-quick-look-of-the-dataset","position":19},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"How to customize your plots and maps"},"type":"lvl2","url":"/moore-oklahoma-tornado#how-to-customize-your-plots-and-maps","position":20},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"How to customize your plots and maps"},"content":"Let’s add some more features to our map, and zoom in on our main storm\n\n","type":"content","url":"/moore-oklahoma-tornado#how-to-customize-your-plots-and-maps","position":21},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Combine into a single figure","lvl2":"How to customize your plots and maps"},"type":"lvl3","url":"/moore-oklahoma-tornado#combine-into-a-single-figure","position":22},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Combine into a single figure","lvl2":"How to customize your plots and maps"},"content":"Let’s start first by combining into a single figure, and zooming in a bit on our main domain.\n\n# Create our figure\nfig = plt.figure(figsize=[12, 4])\n\n# Setup our first axis with reflectivity\nax1 = plt.subplot(121, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('reflectivity',\n                     sweep=3,\n                     vmin=-20,\n                     vmax=60,\n                     ax=ax1,)\n\n# Zoom in by setting the xlim/ylim\nplt.xlim(-99, -96)\nplt.ylim(33.5, 36.5)\n\n# Setup our second axis for velocity\nax2 = plt.subplot(122, projection=ccrs.PlateCarree())\ndisplay.plot_ppi_map('velocity',\n                     sweep=3,\n                     vmin=-40,\n                     vmax=40,\n                     projection=ccrs.PlateCarree(),\n                     ax=ax2,)\n\n# Zoom in by setting the xlim/ylim\nplt.xlim(-99, -96)\nplt.ylim(33.5, 36.5)\nplt.show()\n\n","type":"content","url":"/moore-oklahoma-tornado#combine-into-a-single-figure","position":23},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Add Counties","lvl2":"How to customize your plots and maps"},"type":"lvl3","url":"/moore-oklahoma-tornado#add-counties","position":24},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Add Counties","lvl2":"How to customize your plots and maps"},"content":"We can add counties onto our map by using the USCOUNTIES module from metpy.plots\n\n# Create our figure\nfig = plt.figure(figsize=[12, 4])\n\n# Setup our first axis with reflectivity\nax1 = plt.subplot(121, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('reflectivity',\n                     sweep=3,\n                     vmin=-20,\n                     vmax=60,\n                     ax=ax1,)\n\n# Zoom in by setting the xlim/ylim\nplt.xlim(-99, -96)\nplt.ylim(33.5, 36.5)\n\n# Add counties\nax1.add_feature(USCOUNTIES,\n                linewidth=0.5)\n\n# Setup our second axis for velocity\nax2 = plt.subplot(122, projection=ccrs.PlateCarree())\ndisplay.plot_ppi_map('velocity',\n                     sweep=3,\n                     vmin=-40,\n                     vmax=40,\n                     projection=ccrs.PlateCarree(),\n                     ax=ax2,)\n\n# Zoom in by setting the xlim/ylim\nplt.xlim(-99, -96)\nplt.ylim(33.5, 36.5)\n\n# Add counties\nax2.add_feature(USCOUNTIES,\n                linewidth=0.5)\n\nplt.show()\n\n","type":"content","url":"/moore-oklahoma-tornado#add-counties","position":25},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Zoom in even more","lvl2":"How to customize your plots and maps"},"type":"lvl3","url":"/moore-oklahoma-tornado#zoom-in-even-more","position":26},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Zoom in even more","lvl2":"How to customize your plots and maps"},"content":"Let’s zoom in even more to our main feature - it looks like there is velocity couplet (where high positive and negative values of velcocity are close to one another, indicating rotation), near the center of our map.\n\n# Create our figure\nfig = plt.figure(figsize=[12, 4])\n\n# Setup our first axis with reflectivity\nax1 = plt.subplot(121, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('reflectivity',\n                     sweep=3,\n                     vmin=-20,\n                     vmax=60,\n                     ax=ax1,)\n\n# Zoom in by setting the xlim/ylim\nplt.xlim(-98, -97)\nplt.ylim(35, 36)\n\n# Add counties\nax1.add_feature(USCOUNTIES,\n                linewidth=0.5)\n\n# Setup our second axis for velocity\nax2 = plt.subplot(122, projection=ccrs.PlateCarree())\ndisplay.plot_ppi_map('velocity',\n                     sweep=3,\n                     vmin=-40,\n                     vmax=40,\n                     projection=ccrs.PlateCarree(),\n                     ax=ax2,)\n\n# Zoom in by setting the xlim/ylim\nplt.xlim(-98, -97)\nplt.ylim(35, 36)\n\n# Add counties\nax2.add_feature(USCOUNTIES,\n                linewidth=0.5)\n\nplt.show()\n\n","type":"content","url":"/moore-oklahoma-tornado#zoom-in-even-more","position":27},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Customize our Labels and Add Finer Grid Labels","lvl2":"How to customize your plots and maps"},"type":"lvl3","url":"/moore-oklahoma-tornado#customize-our-labels-and-add-finer-grid-labels","position":28},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"Customize our Labels and Add Finer Grid Labels","lvl2":"How to customize your plots and maps"},"content":"You’ll notice, by default, our colorbar label for the velocity field on the right extends across our entire figure, and the latitude/longitude labels on our axes are now gone. Let’s fix that!\n\n# Create our figure\nfig = plt.figure(figsize=[12, 4])\n\n# Setup our first axis with reflectivity\nax1 = plt.subplot(121, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\nref_map = display.plot_ppi_map('reflectivity',\n                               sweep=3,\n                               vmin=-20,\n                               vmax=60,\n                               ax=ax1,\n                               colorbar_label='Equivalent Relectivity ($Z_{e}$) (dBZ)')\n\n\n# Zoom in by setting the xlim/ylim\nplt.xlim(-97.7, -97.1)\nplt.ylim(35.2, 35.8)\n\n# Add gridlines\ngl = ax1.gridlines(crs=ccrs.PlateCarree(),\n                  draw_labels=True,\n                  linewidth=1, \n                  color='gray', \n                  alpha=0.3,\n                  linestyle='--')\n\n# Make sure labels are only plotted on the left and bottom\ngl.xlabels_top = False\ngl.ylabels_right = False\n\n# Increase the fontsize of our gridline labels\ngl.xlabel_style = {'fontsize':10}\ngl.ylabel_style = {'fontsize':10}\n\n# Add counties\nax1.add_feature(USCOUNTIES,\n                linewidth=0.5)\n\n# Setup our second axis for velocity\nax2 = plt.subplot(122, projection=ccrs.PlateCarree())\nvel_plot = display.plot_ppi_map('velocity',\n                                sweep=3,\n                                vmin=-40,\n                                vmax=40,\n                                projection=ccrs.PlateCarree(),\n                                ax=ax2,\n                                colorbar_label='Radial Velocity (m/s)')\n\n# Zoom in by setting the xlim/ylim\nplt.xlim(-97.7, -97.1)\nplt.ylim(35.2, 35.8)\n\n# Add gridlines\ngl = ax2.gridlines(crs=ccrs.PlateCarree(),\n                   draw_labels=True,\n                   linewidth=1, \n                   color='gray', \n                   alpha=0.3,\n                   linestyle='--')\n\n# Make sure labels are only plotted on the left and bottom\ngl.xlabels_top = False\ngl.ylabels_right = False\n\n# Increase the fontsize of our gridline labels\ngl.xlabel_style = {'fontsize':10}\ngl.ylabel_style = {'fontsize':10}\n\n# Add counties\nax2.add_feature(USCOUNTIES,\n                linewidth=0.5)\nplt.show()\n\n","type":"content","url":"/moore-oklahoma-tornado#customize-our-labels-and-add-finer-grid-labels","position":29},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Summary"},"type":"lvl2","url":"/moore-oklahoma-tornado#summary","position":30},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Summary"},"content":"Within this example, we walked through how to use MetPy and PyART to read in NEXRAD Level 2 data from the Moore Oklahoma tornado in 2013, create some quick looks, and customize the plots to analyze the tornadic supercell closest to the radar.","type":"content","url":"/moore-oklahoma-tornado#summary","position":31},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"What’s next?","lvl2":"Summary"},"type":"lvl3","url":"/moore-oklahoma-tornado#whats-next","position":32},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl3":"What’s next?","lvl2":"Summary"},"content":"Other examples will look at additional data sources and radar types, including data from the Department of Energy (DOE) Atmospheric Radiation Measurement (ARM) Facility, and work through more advanced workflows such as completing a dual-Doppler analysis.\n\n","type":"content","url":"/moore-oklahoma-tornado#whats-next","position":33},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Resources and References"},"type":"lvl2","url":"/moore-oklahoma-tornado#resources-and-references","position":34},{"hierarchy":{"lvl1":"Looking at NEXRAD Data from Moore, Oklahoma","lvl2":"Resources and References"},"content":"NEXRAD Data on AWS\n\nPy-ART NEXRAD Data Example","type":"content","url":"/moore-oklahoma-tornado#resources-and-references","position":35},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)"},"type":"lvl1","url":"/tracer-example","position":0},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)"},"content":"","type":"content","url":"/tracer-example","position":1},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)"},"type":"lvl1","url":"/tracer-example#plotting-data-from-a-field-campaign-tracer","position":2},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)"},"content":"\n\n","type":"content","url":"/tracer-example#plotting-data-from-a-field-campaign-tracer","position":3},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Overview"},"type":"lvl2","url":"/tracer-example#overview","position":4},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nHow to access data from the Atmospheric Radiation Measurment (ARM) user facility\n\nHow to setup a workflow to plot both cross sections (RHIs) and horizontal scans (PPIs)\n\n","type":"content","url":"/tracer-example#overview","position":5},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Prerequisites"},"type":"lvl2","url":"/tracer-example#prerequisites","position":6},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nMatplotlib Basics\n\nRequired\n\nBasic plotting\n\nPy-ART Basics\n\nRequired\n\nIO/Visualization\n\n","type":"content","url":"/tracer-example#prerequisites","position":7},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Imports"},"type":"lvl2","url":"/tracer-example#imports","position":8},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Imports"},"content":"\n\nimport glob\nimport os\nfrom pathlib import Path\n\nimport act\nimport imageio.v2 as imageio\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pyart\n\n","type":"content","url":"/tracer-example#imports","position":9},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Grab Data from ARM"},"type":"lvl2","url":"/tracer-example#grab-data-from-arm","position":10},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Grab Data from ARM"},"content":"One of the better cases was from June 2, 2022, where several cold pools and single-cell storms traversed through the domain.\n\n","type":"content","url":"/tracer-example#grab-data-from-arm","position":11},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"The Tracking Aerosol Convection Interactions ExpeRiment (TRACER) Field Campaign","lvl2":"Grab Data from ARM"},"type":"lvl3","url":"/tracer-example#the-tracking-aerosol-convection-interactions-experiment-tracer-field-campaign","position":12},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"The Tracking Aerosol Convection Interactions ExpeRiment (TRACER) Field Campaign","lvl2":"Grab Data from ARM"},"content":"Data is available from the Atmospheric Radiation Measurment user facility, which helped to lead the TRACER field campaign in Houston, Texas.\n\nThe data are available from the ARM data portal (\n\nhttps://​adc​.arm​.gov/).\n\nWe are interested in the C-band radar, which is utilizing a cell-tracking algorithm, with the datastream\n\nhoucsapr2cfrS2.a1\n\n","type":"content","url":"/tracer-example#the-tracking-aerosol-convection-interactions-experiment-tracer-field-campaign","position":13},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Use the ARM Live API to Download the Data, using ACT","lvl2":"Grab Data from ARM"},"type":"lvl3","url":"/tracer-example#use-the-arm-live-api-to-download-the-data-using-act","position":14},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Use the ARM Live API to Download the Data, using ACT","lvl2":"Grab Data from ARM"},"content":"The Atmospheric Data Community Toolkit (ACT) has a helpful module to interface with the data server:\n\nDownload Data API\n\nact.discovery.download_arm_data?\n\n","type":"content","url":"/tracer-example#use-the-arm-live-api-to-download-the-data-using-act","position":15},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Setup our Download Query","lvl2":"Grab Data from ARM"},"type":"lvl3","url":"/tracer-example#setup-our-download-query","position":16},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Setup our Download Query","lvl2":"Grab Data from ARM"},"content":"Before downloading our data, we need to make sure we have an ARM Data Account, and ARM Live token. Both of these can be found using this link:\n\nARM Live Signup\n\nOnce you sign up, you will see your token. Copy and replace that where we have arm_username and arm_password below.\n\narm_username = os.getenv(\"ARM_USERNAME\")\narm_password = os.getenv(\"ARM_PASSWORD\")\n\ndatastream = \"houcsapr2cfrS2.a1\"\n\nstart_date = \"2022-06-02T11:30:00\"\nend_date = \"2022-06-02T11:40:00\"\n\nprint(len(arm_username), len(arm_password))\n\njune2_csapr_files = act.discovery.download_arm_data(arm_username,\n                                                arm_password,\n                                                datastream,\n                                                start_date,\n                                                end_date,\n                                               )\n\n","type":"content","url":"/tracer-example#setup-our-download-query","position":17},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Read in and Plot the Data"},"type":"lvl2","url":"/tracer-example#read-in-and-plot-the-data","position":18},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Read in and Plot the Data"},"content":"Before following running the next cells, make sure you have created the following directories:\n\nquicklooks/ppi\n\nquicklooks/rhi\n\nquicklooks/vpt\n\n!mkdir quicklooks\n!mkdir quicklooks/rhi\n!mkdir quicklooks/ppi\n!mkdir quicklooks/vpt\n\n","type":"content","url":"/tracer-example#read-in-and-plot-the-data","position":19},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Loop through and plot","lvl2":"Read in and Plot the Data"},"type":"lvl3","url":"/tracer-example#loop-through-and-plot","position":20},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Loop through and plot","lvl2":"Read in and Plot the Data"},"content":"We read in the data, check the scan type, and plot a basic RadarDisplay which will automatically detect whether the plot is a vertical cross section (RHI or VPT), or a horizontal scan (PPI).\n\nThis offers a solid “quick look”, or initial visualization of the data.\n\nfor file in june2_csapr_files:\n    radar = pyart.io.read(file)\n    print(radar.scan_type)\n    display = pyart.graph.RadarDisplay(radar)\n    display.plot(\"reflectivity\", 0)\n    plt.savefig(f\"{radar.scan_type}_{Path(file).stem}.png\", dpi=200)\n    plt.show()\n    plt.close() \n\n","type":"content","url":"/tracer-example#loop-through-and-plot","position":21},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Refine our Plot, Plot Velocity","lvl2":"Read in and Plot the Data"},"type":"lvl3","url":"/tracer-example#refine-our-plot-plot-velocity","position":22},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Refine our Plot, Plot Velocity","lvl2":"Read in and Plot the Data"},"content":"Let’s focus on the vertical scans of the data, or the RHIs.\n\nYou’ll notice that we had some cells around 60 km from the radar, with the vertical axis less than 6 km.\n\nLet’s reflect that in the plots!\n\n","type":"content","url":"/tracer-example#refine-our-plot-plot-velocity","position":23},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl4":"Customize our plot look","lvl3":"Refine our Plot, Plot Velocity","lvl2":"Read in and Plot the Data"},"type":"lvl4","url":"/tracer-example#customize-our-plot-look","position":24},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl4":"Customize our plot look","lvl3":"Refine our Plot, Plot Velocity","lvl2":"Read in and Plot the Data"},"content":"Before we plot, we can change the size of our font, and style using the following parameters:\n\nfont = {'family' : 'serif',\n        'weight' : 'bold',\n        'size'   : 16}\n\nmatplotlib.rc('font', **font)\n\n","type":"content","url":"/tracer-example#customize-our-plot-look","position":25},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl4":"Apply our Plotting Loop","lvl3":"Refine our Plot, Plot Velocity","lvl2":"Read in and Plot the Data"},"type":"lvl4","url":"/tracer-example#apply-our-plotting-loop","position":26},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl4":"Apply our Plotting Loop","lvl3":"Refine our Plot, Plot Velocity","lvl2":"Read in and Plot the Data"},"content":"We:\n\nCheck to see if the scan is an RHI\n\nPlot the reflectivity on one subplot\n\nPlot velocity on the other\n\nSave our plots\n\nfor file in june2_csapr_files:\n    radar = pyart.io.read(file)\n    if radar.scan_type == 'rhi':\n        fig = plt.figure(figsize=(20,8))\n        display = pyart.graph.RadarDisplay(radar)\n        ax = plt.subplot(121)\n        display.plot(\"reflectivity\",\n                     0,\n                     ax=ax,\n                     vmin=-20,\n                     vmax=70)\n        plt.xlim(62,68)\n        plt.ylim(0, 6)\n        \n        ax2 = plt.subplot(122)\n        display.plot(\"mean_doppler_velocity\",\n                     0,\n                     ax=ax2, \n                     cmap='balance',\n                     vmin=-15,\n                     vmax=15)\n        plt.xlim(62,68)\n        plt.ylim(0, 6)\n        plt.savefig(f\"{radar.scan_type}_{Path(file).stem}.png\", dpi=200)\n        plt.show()\n        plt.close() \n\n","type":"content","url":"/tracer-example#apply-our-plotting-loop","position":27},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Create a GIF of the RHI images","lvl2":"Read in and Plot the Data"},"type":"lvl3","url":"/tracer-example#create-a-gif-of-the-rhi-images","position":28},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"Create a GIF of the RHI images","lvl2":"Read in and Plot the Data"},"content":"\n\nrhi_images = sorted(glob.glob(f\"{radar.scan_type}*\"))\n\nwith imageio.get_writer('storm-animation.gif', mode='I') as writer:\n    for filename in rhi_images:\n        image = imageio.imread(filename)\n        writer.append_data(image)\n\n\n\n","type":"content","url":"/tracer-example#create-a-gif-of-the-rhi-images","position":29},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Summary"},"type":"lvl2","url":"/tracer-example#summary","position":30},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Summary"},"content":"Within this example, we walked through how to access ARM data from a field campaign in Texas, plot a quick look of the data, and refine our plots to investigate a storm!","type":"content","url":"/tracer-example#summary","position":31},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"What’s Next?","lvl2":"Summary"},"type":"lvl3","url":"/tracer-example#whats-next","position":32},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl3":"What’s Next?","lvl2":"Summary"},"content":"We will showcase other data workflow examples, including field campaigns in other regions and data access methods from other data centers.\n\n","type":"content","url":"/tracer-example#whats-next","position":33},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Resources and References"},"type":"lvl2","url":"/tracer-example#resources-and-references","position":34},{"hierarchy":{"lvl1":"Plotting Data from a Field Campaign (TRACER)","lvl2":"Resources and References"},"content":"ARM Data Discovery\n\nTRACER Field Campaign\n\nCSAPR Radar Data:\n\nBharadwaj, N., Collis, S., Hardin, J., Isom, B., Lindenmaier, I., Matthews, A., & Nelson, D. C-Band Scanning ARM Precipitation Radar (CSAPR2CFR). Atmospheric Radiation Measurement (ARM) User Facility. \n\nBharadwaj et al. (2021)\n\nPy-ART:\n\nHelmus, J.J. & Collis, S.M., (2016). The Python ARM Radar Toolkit (Py-ART), a Library for Working with Weather Radar Data in the Python Programming Language. Journal of Open Research Software. 4(1), p.e25. DOI: \n\nHelmus & Collis (2016)\n\nACT:\n\nAdam Theisen, Ken Kehoe, Zach Sherman, Bobby Jackson, Alyssa Sockol, Corey Godine, Max Grover, Jason Hemedinger, Jenni Kyrouac, Maxwell Levin, Michael Giansiracusa (2022). The Atmospheric Data Community Toolkit (ACT). Zenodo. DOI: \n\nTheisen et al. (2022)","type":"content","url":"/tracer-example#resources-and-references","position":35},{"hierarchy":{"lvl1":"Interactive Radar Visualization"},"type":"lvl1","url":"/interactive-radar-visualization","position":0},{"hierarchy":{"lvl1":"Interactive Radar Visualization"},"content":"","type":"content","url":"/interactive-radar-visualization","position":1},{"hierarchy":{"lvl1":"Interactive Radar Visualization"},"type":"lvl1","url":"/interactive-radar-visualization#interactive-radar-visualization","position":2},{"hierarchy":{"lvl1":"Interactive Radar Visualization"},"content":"\n\n","type":"content","url":"/interactive-radar-visualization#interactive-radar-visualization","position":3},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Overview"},"type":"lvl2","url":"/interactive-radar-visualization#overview","position":4},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Overview"},"content":"Within this cookbook, we will detail how to create interactive plots of radar data!\n\nReading data with Xradar\n\nCreating your first interactive figure with Xradar + hvPlot\n\nCombining your plots into a single dashboard\n\nFiltering and Checking Data Quality\n\nCreate a Dashboard to Analyze ZDR Bias\n\n","type":"content","url":"/interactive-radar-visualization#overview","position":5},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Imports"},"type":"lvl2","url":"/interactive-radar-visualization#imports","position":6},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Imports"},"content":"\n\nimport xradar as xd\nimport fsspec\nimport pyart\nfrom open_radar_data import DATASETS\nimport hvplot.xarray\nimport holoviews as hv\nimport panel as pn\n\nhv.extension(\"bokeh\")\n\n","type":"content","url":"/interactive-radar-visualization#imports","position":7},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Prerequisites"},"type":"lvl2","url":"/interactive-radar-visualization#prerequisites","position":8},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Prerequisites"},"content":"It is recommended that you are familiar with working with weather radar data, the core data structures, and the basics of reading in different radar datasets.\n\nConcepts\n\nImportance\n\nNotes\n\nIntro to Cartopy\n\nNecessary\n\n\n\nXradar User Guide: Plot a PPI\n\nNecessary\n\n\n\nUnderstanding of NetCDF\n\nHelpful\n\nFamiliarity with metadata structure\n\nTime to learn: 30 minutes\n\n","type":"content","url":"/interactive-radar-visualization#prerequisites","position":9},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Reading Data with Xradar"},"type":"lvl2","url":"/interactive-radar-visualization#reading-data-with-xradar","position":10},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Reading Data with Xradar"},"content":"While we have focused much of the content around the Python ARM Radar Toolkit (Py-ART), \n\nXradar is another helpful package we can use to work with this in xarray!\n\nHere, we use data from the Colombian weather radar network, using some remote access tools such as \n\nfsspec.\n\nfs = fsspec.filesystem(\"s3\", anon=True)\nfiles = sorted(fs.glob(\"s3-radaresideam/l2_data/2022/08/09/Carimagua/CAR22080919*\"))\nfiles\n\nOnce we have our files of interest, we can load one in. Let’s read in a single file - for example, we are interested in the 8th file (index=7)\n\ntask_file = fsspec.open_local(f'simplecache::s3://{files[7]}',\n                                s3={'anon': True},\n                                filecache={'cache_storage': '.'})\n\n","type":"content","url":"/interactive-radar-visualization#reading-data-with-xradar","position":11},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Read the data in xradar","lvl2":"Reading Data with Xradar"},"type":"lvl3","url":"/interactive-radar-visualization#read-the-data-in-xradar","position":12},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Read the data in xradar","lvl2":"Reading Data with Xradar"},"content":"We use \n\nxradar, an open-source toolkit to read weather radar data and load into the Xarray data structure. The data format here is an IRIS file, so we use the \n\nopen_iris_datatree reader.\n\nradar = xd.io.open_iris_datatree(task_file).xradar.georeference()\nradar\n\n","type":"content","url":"/interactive-radar-visualization#read-the-data-in-xradar","position":13},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Creating Your First Interactive Figure with Xradar and hvPlot"},"type":"lvl2","url":"/interactive-radar-visualization#creating-your-first-interactive-figure-with-xradar-and-hvplot","position":14},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Creating Your First Interactive Figure with Xradar and hvPlot"},"content":"hvPlot is helpful tool when working with interactive visualizions! It is a tool built on top of several other packages, that we can use with Xarray.\n\nBy default, this visualization plots azimuth along the y-axis and range along the y-axis. While this is desired in certain cases, we cannot gather much spatial information from this.\n\nref = radar[\"sweep_0\"].DBZH.hvplot.quadmesh(cmap='ChaseSpectral',\n                                            title='Horizontal Reflectivity (dBZ)',\n                                            clim=(-20,60))\nref\n\n","type":"content","url":"/interactive-radar-visualization#creating-your-first-interactive-figure-with-xradar-and-hvplot","position":15},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Refining Our Plot - Recreating a Plan Position Indicator (PPI)","lvl2":"Creating Your First Interactive Figure with Xradar and hvPlot"},"type":"lvl3","url":"/interactive-radar-visualization#refining-our-plot-recreating-a-plan-position-indicator-ppi","position":16},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Refining Our Plot - Recreating a Plan Position Indicator (PPI)","lvl2":"Creating Your First Interactive Figure with Xradar and hvPlot"},"content":"We instead would like to create a Plan Position Indicator (PPI) plot. Since we already georeferenced the dataset, we set x/y to be x and y, or the distance away from the radar, as well as tuning some additional parameters. We set rasterize=True to lazily load in the data, which renders the plot more quickly and increases resolution as we zoom in.\n\nref = radar[\"sweep_0\"].DBZH.hvplot.quadmesh(x='x',\n                                           y='y',\n                                           cmap='ChaseSpectral',\n                                           clabel='Horizontal Reflectivity (dBZ)',\n                                           title=f'Horizontal Reflectivity \\n {radar.attrs[\"instrument_name\"]} Radar',\n                                           clim=(-20, 60),\n                                           height=500,\n                                             rasterize=True,\n                                           width=600,)\n\nref\n\nzdr = radar[\"sweep_0\"].ZDR.hvplot.quadmesh(x='x',\n                                             y='y',\n                                             cmap='ChaseSpectral',\n                                             clabel='Differential Reflectivity (dB)',\n                                             title=f'Horizontal Reflectivity \\n {radar.attrs[\"instrument_name\"]} Radar',\n                                             clim=(-1, 6),\n                                             height=500,\n                                             rasterize=True,\n                                             width=600,)\nzdr\n\n","type":"content","url":"/interactive-radar-visualization#refining-our-plot-recreating-a-plan-position-indicator-ppi","position":17},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Combining your plots into a single dashboard","lvl2":"Creating Your First Interactive Figure with Xradar and hvPlot"},"type":"lvl3","url":"/interactive-radar-visualization#combining-your-plots-into-a-single-dashboard","position":18},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Combining your plots into a single dashboard","lvl2":"Creating Your First Interactive Figure with Xradar and hvPlot"},"content":"You can combine plots using the + syntax to add plots side-by-side, or * to add them to the same plot. For example, let’s combine our reflectivity and velocity plot.\n\n(ref + zdr).cols(1)\n\n","type":"content","url":"/interactive-radar-visualization#combining-your-plots-into-a-single-dashboard","position":19},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Filtering and Checking Data Quality"},"type":"lvl2","url":"/interactive-radar-visualization#filtering-and-checking-data-quality","position":20},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Filtering and Checking Data Quality"},"content":"We can also filter our data - notice the low values in both differential reflectivity and reflectivity. We can mask these out using Xarray!\n\n# Subset our first sweep\nds = radar[\"sweep_0\"].to_dataset()\n\n","type":"content","url":"/interactive-radar-visualization#filtering-and-checking-data-quality","position":21},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Determine Mask Thresholds","lvl2":"Filtering and Checking Data Quality"},"type":"lvl3","url":"/interactive-radar-visualization#determine-mask-thresholds","position":22},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Determine Mask Thresholds","lvl2":"Filtering and Checking Data Quality"},"content":"Let’s determine our thresholds for filtering the data, using histograms! These are available through hvPlot, using the .hvplot.hist() extension.\n\nzdr_hist = ds.ZDR.hvplot.hist()\nref_hist = ds.DBZH.hvplot.hist()\n(zdr_hist + ref_hist).cols(1)\n\nNotice how we have very low values for both fields, which we can threshold using:\n\nDifferential Reflectivity < -5\n\nHorizontal Reflectivity < -32\n\nds = ds.where((ds.ZDR >= -5) & (ds.DBZH != -32))\nds\n\n","type":"content","url":"/interactive-radar-visualization#determine-mask-thresholds","position":23},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Double Check our Filtered Data","lvl2":"Filtering and Checking Data Quality"},"type":"lvl3","url":"/interactive-radar-visualization#double-check-our-filtered-data","position":24},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"Double Check our Filtered Data","lvl2":"Filtering and Checking Data Quality"},"content":"Let’s double check that our filtering worked - notice the new, more representative distributions!\n\nzdr_hist = ds.ZDR.hvplot.hist()\nref_hist = ds.DBZH.hvplot.hist()\n(zdr_hist + ref_hist).cols(1)\n\n","type":"content","url":"/interactive-radar-visualization#double-check-our-filtered-data","position":25},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Create a Dashboard to Analyze ZDR Bias"},"type":"lvl2","url":"/interactive-radar-visualization#create-a-dashboard-to-analyze-zdr-bias","position":26},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Create a Dashboard to Analyze ZDR Bias"},"content":"A common data quality check is differential reflectivity bias. This value should be around 0 for low values of horizontal reflectivity. We use a few steps here to create this visualization\n\nUnstack the dataset so we are left with a single dimension - the single range gate (single points)\n\nCreate histograms (.hist) and a 2-dimensional histogram (.hexbin) to visualize the data\n\nStack these into single view using gridspec\n\nds = ds.stack({\"gate\": {\"azimuth\", \"range\"}}).reset_index(\"gate\")\n\nhist_dbz = ds.hvplot.hist(\"DBZH\",\n                          width=500,\n                          height=200,\n                          title=\"Horizontal Reflectivity Distribution\",)\nhist_zdr = ds.hvplot.hist(\"ZDR\",\n                          height=400,\n                          title=\"Differential Reflectivity Distribution\",\n                         ).opts(invert_axes=True)\nhexbin = ds.hvplot.hexbin(x='DBZH',\n                          y='ZDR',\n                          title='Reflectivity vs. Differential Reflectivity Distribution',\n                          width=500,\n                          height=400) *  hv.HLine(0,\n                                                  label='Differential Reflectivity = 0 Line').opts(color='red',\n                                                           line_width=1)\n\ngspec = pn.GridSpec(width=800, height=400)\n\ngspec[0,   0:2  ] = hist_dbz\ngspec[1:3,   0:2  ] = hexbin\ngspec[1:3,   2  ] = hist_zdr\n\ngspec\n\n","type":"content","url":"/interactive-radar-visualization#create-a-dashboard-to-analyze-zdr-bias","position":27},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Summary"},"type":"lvl2","url":"/interactive-radar-visualization#summary","position":28},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Summary"},"content":"Within this notebook, we covered how to use interactive visualizations with your weather radar data, including applications to checking data quality.","type":"content","url":"/interactive-radar-visualization#summary","position":29},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"What’s Next?","lvl2":"Summary"},"type":"lvl3","url":"/interactive-radar-visualization#whats-next","position":30},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl3":"What’s Next?","lvl2":"Summary"},"content":"Next, we will continue to explore methods of cleaning and visualizing data!\n\n","type":"content","url":"/interactive-radar-visualization#whats-next","position":31},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Resources and References"},"type":"lvl2","url":"/interactive-radar-visualization#resources-and-references","position":32},{"hierarchy":{"lvl1":"Interactive Radar Visualization","lvl2":"Resources and References"},"content":"Xradar documentation\n\nIDEAM radar data","type":"content","url":"/interactive-radar-visualization#resources-and-references","position":33},{"hierarchy":{"lvl1":"Py-ART Basics"},"type":"lvl1","url":"/pyart-basics","position":0},{"hierarchy":{"lvl1":"Py-ART Basics"},"content":"\n\n","type":"content","url":"/pyart-basics","position":1},{"hierarchy":{"lvl1":"Py-ART Basics"},"type":"lvl1","url":"/pyart-basics#py-art-basics","position":2},{"hierarchy":{"lvl1":"Py-ART Basics"},"content":"\n\n","type":"content","url":"/pyart-basics#py-art-basics","position":3},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Overview"},"type":"lvl2","url":"/pyart-basics#overview","position":4},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nGeneral overview of Py-ART and its functionality\n\nReading data using Py-ART\n\nAn overview of the pyart.Radar object\n\nCreate a Plot of our Radar Data\n\n","type":"content","url":"/pyart-basics#overview","position":5},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Prerequisites"},"type":"lvl2","url":"/pyart-basics#prerequisites","position":6},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nIntro to Cartopy\n\nHelpful\n\nBasic features\n\nMatplotlib Basics\n\nHelpful\n\nBasic plotting\n\nNumPy Basics\n\nHelpful\n\nBasic arrays\n\nTime to learn: 45 minutes\n\n","type":"content","url":"/pyart-basics#prerequisites","position":7},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Imports"},"type":"lvl2","url":"/pyart-basics#imports","position":8},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Imports"},"content":"\n\nimport os\nimport warnings\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\n\nimport pyart\nfrom pyart.testing import get_test_data\n\nwarnings.filterwarnings('ignore')\n\n","type":"content","url":"/pyart-basics#imports","position":9},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"An Overview of Py-ART"},"type":"lvl2","url":"/pyart-basics#an-overview-of-py-art","position":10},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"An Overview of Py-ART"},"content":"\n\n","type":"content","url":"/pyart-basics#an-overview-of-py-art","position":11},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"History of the Py-ART","lvl2":"An Overview of Py-ART"},"type":"lvl3","url":"/pyart-basics#history-of-the-py-art","position":12},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"History of the Py-ART","lvl2":"An Overview of Py-ART"},"content":"Development began to address the needs of ARM with the acquisition of a number of\nnew scanning cloud and precipitation radar as part of the American Recovery Act.\n\nThe project has since expanded to work with a variety of weather radars and a wider user\nbase including radar researchers and climate modelers.\n\nThe software has been released on GitHub as open source software under a BSD license.\nRuns on Linux, OS X. It also runs on Windows with more limited functionality.","type":"content","url":"/pyart-basics#history-of-the-py-art","position":13},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"What can PyART Do?","lvl2":"An Overview of Py-ART"},"type":"lvl3","url":"/pyart-basics#what-can-pyart-do","position":14},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"What can PyART Do?","lvl2":"An Overview of Py-ART"},"content":"Py-ART can be used for a variety of tasks from basic plotting to more complex\nprocessing pipelines. Specific uses for Py-ART include:\n\nReading radar data in a variety of file formats.\n\nCreating plots and visualization of radar data.\n\nCorrecting radar moments while in antenna coordinates, such as:\n\nDoppler unfolding/de-aliasing.\n\nAttenuation correction.\n\nPhase processing using a Linear Programming method.\n\nMapping data from one or multiple radars onto a Cartesian grid.\n\nPerforming retrievals.\n\nWriting radial and Cartesian data to NetCDF files.\n\n","type":"content","url":"/pyart-basics#what-can-pyart-do","position":15},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Reading in Data Using Py-ART"},"type":"lvl2","url":"/pyart-basics#reading-in-data-using-py-art","position":16},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Reading in Data Using Py-ART"},"content":"\n\n","type":"content","url":"/pyart-basics#reading-in-data-using-py-art","position":17},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"Reading data in using pyart.io.read","lvl2":"Reading in Data Using Py-ART"},"type":"lvl3","url":"/pyart-basics#reading-data-in-using-pyart-io-read","position":18},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"Reading data in using pyart.io.read","lvl2":"Reading in Data Using Py-ART"},"content":"\n\nWhen reading in a radar file, we use the pyart.io.read module.\n\npyart.io.read can read a variety of different radar formats, such as Cf/Radial, LASSEN, and more.\nThe documentation on what formats can be read by Py-ART can be found here:\n\nPy-ART IO Documentation\n\nFor most file formats listed on the page, using pyart.io.read should suffice since Py-ART has the ability to automatically detect the file format.\n\nLet’s check out what arguments arguments pyart.io.read() takes in!\n\npyart.io.read?\n\nLet’s use a sample data file from pyart - which is \n\ncfradial format.\n\nWhen we read this in, we get a \n\npyart.Radar object!\n\nfile = get_test_data('swx_20120520_0641.nc')\nradar = pyart.io.read(file)\nradar\n\n","type":"content","url":"/pyart-basics#reading-data-in-using-pyart-io-read","position":19},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"Investigate the pyart.Radar object","lvl2":"Reading in Data Using Py-ART"},"type":"lvl3","url":"/pyart-basics#investigate-the-pyart-radar-object","position":20},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"Investigate the pyart.Radar object","lvl2":"Reading in Data Using Py-ART"},"content":"\n\nWithin this \n\npyart.Radar object object are the actual data fields.\n\nThis is where data such as reflectivity and velocity are stored.\n\nTo see what fields are present we can add the fields and keys additions to the variable where the radar object is stored.\n\nradar.fields.keys()\n\n","type":"content","url":"/pyart-basics#investigate-the-pyart-radar-object","position":21},{"hierarchy":{"lvl1":"Py-ART Basics","lvl4":"Extract a sample data field","lvl3":"Investigate the pyart.Radar object","lvl2":"Reading in Data Using Py-ART"},"type":"lvl4","url":"/pyart-basics#extract-a-sample-data-field","position":22},{"hierarchy":{"lvl1":"Py-ART Basics","lvl4":"Extract a sample data field","lvl3":"Investigate the pyart.Radar object","lvl2":"Reading in Data Using Py-ART"},"content":"\n\nThe fields are stored in a dictionary, each containing coordinates, units and more.\nAll can be accessed by just adding the fields addition to the radar object variable.\n\nFor an individual field, we add a string in brackets after the fields addition to see\nthe contents of that field.\n\nLet’s take a look at 'corrected_reflectivity_horizontal', which is a common field to investigate.\n\nprint(radar.fields['corrected_reflectivity_horizontal'])\n\nWe can go even further in the dictionary and access the actual reflectivity data.\n\nWe use add 'data' at the end, which will extract the data array (which is a masked numpy array) from the dictionary.\n\nreflectivity = radar.fields['corrected_reflectivity_horizontal']['data']\nprint(type(reflectivity), reflectivity)\n\nLets’ check the size of this array...\n\nreflectivity.shape\n\nThis reflectivity data array, numpy array, is a two-dimensional array with dimensions:\n\nGates (number of samples away from the radar)\n\nRays (direction around the radar)\n\nprint(radar.nrays, radar.ngates)\n\nIf we wanted to look the 300th ray, at the second gate, we would use something like the following:\n\nprint(reflectivity[300, 2])\n\n","type":"content","url":"/pyart-basics#extract-a-sample-data-field","position":23},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Plotting our Radar Data"},"type":"lvl2","url":"/pyart-basics#plotting-our-radar-data","position":24},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Plotting our Radar Data"},"content":"\n\n","type":"content","url":"/pyart-basics#plotting-our-radar-data","position":25},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"An Overview of Py-ART Plotting Utilities","lvl2":"Plotting our Radar Data"},"type":"lvl3","url":"/pyart-basics#an-overview-of-py-art-plotting-utilities","position":26},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"An Overview of Py-ART Plotting Utilities","lvl2":"Plotting our Radar Data"},"content":"Now that we have loaded the data and inspected it, the next logical thing to do is to visualize the data! Py-ART’s visualization functionality is done through the objects in the \n\npyart.graph module.\n\nIn Py-ART there are 4 primary visualization classes in pyart.graph:\n\nRadarDisplay\n\nRadarMapDisplay\n\nAirborneRadarDisplay\n\nPlotting grid data\n\nGridMapDisplay","type":"content","url":"/pyart-basics#an-overview-of-py-art-plotting-utilities","position":27},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"Use the RadarMapDisplay with our data","lvl2":"Plotting our Radar Data"},"type":"lvl3","url":"/pyart-basics#use-the-radarmapdisplay-with-our-data","position":28},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"Use the RadarMapDisplay with our data","lvl2":"Plotting our Radar Data"},"content":"For the this example, we will be using RadarMapDisplay, using Cartopy to deal with geographic coordinates.\n\nWe start by creating a figure first.\n\nfig = plt.figure(figsize=[10, 10])\n\nOnce we have a figure, let’s add our RadarMapDisplay\n\nfig = plt.figure(figsize=[10, 10])\ndisplay = pyart.graph.RadarMapDisplay(radar)\n\nAdding our map display without specifying a field to plot won’t do anything we need to specifically add a field to field using .plot_ppi_map()\n\ndisplay.plot_ppi_map('corrected_reflectivity_horizontal')\n\nBy default, it will plot the elevation scan, the the default colormap from Matplotlib... let’s customize!\n\nWe add the following arguements:\n\nsweep=3 - The fourth elevation scan (since we are using Python indexing)\n\nvmin=-20 - Minimum value for our plotted field/colorbar\n\nvmax=60 - Maximum value for our plotted field/colorbar\n\nprojection=ccrs.PlateCarree() - Cartopy latitude/longitude coordinate system\n\ncmap='HomeyerRainbow' - Colormap to use, selecting one provided by PyART\n\nfig = plt.figure(figsize=[12, 12])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('corrected_reflectivity_horizontal',\n                     sweep=3,\n                     vmin=-20,\n                     vmax=60,\n                     projection=ccrs.PlateCarree(),\n                     cmap='HomeyerRainbow')\nplt.show()\n\nYou can change many parameters in the graph by changing the arguments to plot_ppi_map. As you can recall from earlier. simply view these arguments in a Jupyter notebook by typing:\n\ndisplay.plot_ppi_map?\n\nFor example, let’s change the colormap to something different\n\nfig = plt.figure(figsize=[12, 12])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('corrected_reflectivity_horizontal',\n                     sweep=3,\n                     vmin=-20,\n                     vmax=60,\n                     projection=ccrs.PlateCarree(),\n                     cmap='Carbone42')\nplt.show()\n\nOr, let’s view a different elevation scan! To do this, change the sweep parameter in the plot_ppi_map function.\n\nfig = plt.figure(figsize=[12, 12])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('corrected_reflectivity_horizontal',\n                     sweep=0,\n                     vmin=-20,\n                     vmax=60,\n                     projection=ccrs.PlateCarree(),\n                     cmap='Carbone42')\nplt.show()\n\nLet’s take a look at a different field - for example, correlation coefficient (corr_coeff)\n\nfig = plt.figure(figsize=[12, 12])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('copol_coeff',\n                     sweep=0,\n                     vmin=0.8,\n                     vmax=1.,\n                     projection=ccrs.PlateCarree(),\n                     cmap='Carbone42')\nplt.show()\n\n","type":"content","url":"/pyart-basics#use-the-radarmapdisplay-with-our-data","position":29},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Summary"},"type":"lvl2","url":"/pyart-basics#summary","position":30},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Summary"},"content":"Within this notebook, we covered the basics of working with radar data using pyart, including:\n\nReading in a file using pyart.io\n\nInvestigating the Radar object\n\nVisualizing radar data using the RadarMapDisplay","type":"content","url":"/pyart-basics#summary","position":31},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"What’s Next","lvl2":"Summary"},"type":"lvl3","url":"/pyart-basics#whats-next","position":32},{"hierarchy":{"lvl1":"Py-ART Basics","lvl3":"What’s Next","lvl2":"Summary"},"content":"In the next few notebooks, we walk through gridding radar data, applying data cleaning methods, and advanced visualization methods!\n\n","type":"content","url":"/pyart-basics#whats-next","position":33},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Resources and References"},"type":"lvl2","url":"/pyart-basics#resources-and-references","position":34},{"hierarchy":{"lvl1":"Py-ART Basics","lvl2":"Resources and References"},"content":"Py-ART essentials links:\n\nLanding page\n\nExamples\n\nSource Code\n\nMailing list\n\nIssue Tracker","type":"content","url":"/pyart-basics#resources-and-references","position":35},{"hierarchy":{"lvl1":"Py-ART Corrections"},"type":"lvl1","url":"/pyart-corrections","position":0},{"hierarchy":{"lvl1":"Py-ART Corrections"},"content":"\n\n","type":"content","url":"/pyart-corrections","position":1},{"hierarchy":{"lvl1":"Py-ART Corrections"},"type":"lvl1","url":"/pyart-corrections#py-art-corrections","position":2},{"hierarchy":{"lvl1":"Py-ART Corrections"},"content":"\n\n","type":"content","url":"/pyart-corrections#py-art-corrections","position":3},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Overview"},"type":"lvl2","url":"/pyart-corrections#overview","position":4},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nIntro to radar aliasing.\n\nCalculation of velocity texture using Py-ART\n\nDealiasing the velocity field","type":"content","url":"/pyart-corrections#overview","position":5},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Prerequisites"},"type":"lvl2","url":"/pyart-corrections#prerequisites","position":6},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nPy-ART Basics\n\nHelpful\n\nBasic features\n\nMatplotlib Basics\n\nHelpful\n\nBasic plotting\n\nNumPy Basics\n\nHelpful\n\nBasic arrays\n\nTime to learn: 30 minutes\n\n","type":"content","url":"/pyart-corrections#prerequisites","position":7},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Imports"},"type":"lvl2","url":"/pyart-corrections#imports","position":8},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Imports"},"content":"\n\nimport os\nimport warnings\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nimport pyart\nfrom pyart.testing import get_test_data\n\nwarnings.filterwarnings('ignore')\n\n","type":"content","url":"/pyart-corrections#imports","position":9},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Read in the Data and Plot the Data"},"type":"lvl2","url":"/pyart-corrections#read-in-the-data-and-plot-the-data","position":10},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Read in the Data and Plot the Data"},"content":"\n\n","type":"content","url":"/pyart-corrections#read-in-the-data-and-plot-the-data","position":11},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Read in a sample file from the Southern Great Plains (SGP) Site","lvl2":"Read in the Data and Plot the Data"},"type":"lvl3","url":"/pyart-corrections#read-in-a-sample-file-from-the-southern-great-plains-sgp-site","position":12},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Read in a sample file from the Southern Great Plains (SGP) Site","lvl2":"Read in the Data and Plot the Data"},"content":"Our data is formatted as an mdv file, which is the abbreviation for Meteorological Data Volume, a data format developed by the National Center for Atmospheric Research in the early 1990s.\n\nfile = get_test_data('110635.mdv')\nradar = pyart.io.read(file)\n\n","type":"content","url":"/pyart-corrections#read-in-a-sample-file-from-the-southern-great-plains-sgp-site","position":13},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Plot a quick-look of reflectivity and velocity","lvl2":"Read in the Data and Plot the Data"},"type":"lvl3","url":"/pyart-corrections#plot-a-quick-look-of-reflectivity-and-velocity","position":14},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Plot a quick-look of reflectivity and velocity","lvl2":"Read in the Data and Plot the Data"},"content":"We can start by taking a quick look at the reflectivity and velocity fields. Notice how the velocity field is rather messy, indicated by the speckles and high/low values directly next to each other\n\nfig = plt.figure(figsize=[8, 10])\nax = plt.subplot(211, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('reflectivity',\n                     ax=ax,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=0,\n                     vmax=60, \n                     projection=ccrs.PlateCarree(),\n                     cmap='HomeyerRainbow')\n\nax2 = plt.subplot(2,1,2,projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('velocity',\n                     ax=ax2,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-17,\n                     vmax=17, \n                     projection=ccrs.PlateCarree(),\n                     cmap='balance')\nplt.show()\n\n","type":"content","url":"/pyart-corrections#plot-a-quick-look-of-reflectivity-and-velocity","position":15},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Dealiasing our Velocity"},"type":"lvl2","url":"/pyart-corrections#dealiasing-our-velocity","position":16},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Dealiasing our Velocity"},"content":"","type":"content","url":"/pyart-corrections#dealiasing-our-velocity","position":17},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"An Overview of Aliasing","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/pyart-corrections#an-overview-of-aliasing","position":18},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"An Overview of Aliasing","lvl2":"Dealiasing our Velocity"},"content":"\n\nThe radial velocity measured by the radar is mesasured by detecing the phase shift between the transmitted pulse and the pulse recieved by the radar. However, using this methodology, it is only possible to detect phase shifts within \\pm 2\\pi due to the periodicity of the transmitted wave. Therefore, for example, a phase shift of 3\\pi would erroneously be detected as a phase shift of -\\pi and give an incorrect value of velocity when retrieved by the radar. This phenomena is called aliasing. The maximium unambious velocity that can be detected by the radar before aliasing occurs is called the Nyquist velocity.\n\nIn the next example, you will see an example of aliasing occurring, where the values of +15 m/s abruptly transition into a region of -15 m/s, with -5 m/s in the middle of the region around 37 N, 97 W.\n\n","type":"content","url":"/pyart-corrections#an-overview-of-aliasing","position":19},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Calculate Velocity Texture","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/pyart-corrections#calculate-velocity-texture","position":20},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Calculate Velocity Texture","lvl2":"Dealiasing our Velocity"},"content":"First, for dealiasing to work efficiently, we need to use a GateFilter. Notice that, this time, the data shown does not give us a nice gate_id. This is what raw data looks like, and we need to do some preprocessing on the data to remove noise and clutter. Thankfully, Py-ART gives us the capability to do this. As a simple filter in this example, we will first calculate the velocity texture using Py-ART’s \n\ncalculate_velocity_texture function. The velocity texture is the standard deviation of velocity surrounding a gate. This will be higher in the presence of noise.\n\nLet’s investigate this function first...\n\npyart.retrieve.calculate_velocity_texture?\n\n","type":"content","url":"/pyart-corrections#calculate-velocity-texture","position":21},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Determining the Right Parameters","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/pyart-corrections#determining-the-right-parameters","position":22},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Determining the Right Parameters","lvl2":"Dealiasing our Velocity"},"content":"You’ll notice that we need:\n\nOur radar object\n\nThe name of our velocity field\n\nThe number of gates within our window to use to calculate the texture\n\nThe nyquist velocity\n\nWe can retrieve the nyquest velocity from our instrument parameters fortunately - using the following syntax!\n\nnyquist_velocity = radar.instrument_parameters[\"nyquist_velocity\"][\"data\"]\nnyquist_velocity\n\nWhile the nyquist velocity is stored as an array, we see that these are all the same value...\n\nnp.unique(nyquist_velocity)\n\nLet’s save this single value to a float to use later...\n\nnyquist_value = np.unique(nyquist_velocity)[0]\n\n","type":"content","url":"/pyart-corrections#determining-the-right-parameters","position":23},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/pyart-corrections#calculate-velocity-texture-and-filter-our-data","position":24},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"Now that we have an ide?a of which parameters to pass in, let’s calculate velocity texture!\n\nvel_texture = pyart.retrieve.calculate_velocity_texture(radar,\n                                                        vel_field='velocity',\n                                                        nyq=nyquist_value)\nvel_texture\n\nThe pyart.retrieve.calculate_velocity_texture function results in a data dictionary, including the actual data, as well as metadata. We can add this to our radar object, by using the radar.add_field method, passing the name of our new field (\"texture\"), the data dictionary (vel_texture), and a clarification that we want to replace the existing velocity texture field if it already exists in our radar object (replace_existing=True)\n\nradar.add_field('texture', vel_texture, replace_existing=True)\n\n","type":"content","url":"/pyart-corrections#calculate-velocity-texture-and-filter-our-data","position":25},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Velocity Texture Field","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/pyart-corrections#plot-our-velocity-texture-field","position":26},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Velocity Texture Field","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"\n\nNow that we have our velocity texture field added to our radar object, let’s plot it!\n\nfig = plt.figure(figsize=[8, 8])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('texture',\n                     sweep=0,\n                     resolution='50m',\n                     vmin=0,\n                     vmax=10, \n                     projection=ccrs.PlateCarree(),\n                     cmap='balance')\nplt.show()\n\n","type":"content","url":"/pyart-corrections#plot-our-velocity-texture-field","position":27},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Determine a Suitable Velocity Texture Threshold","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/pyart-corrections#determine-a-suitable-velocity-texture-threshold","position":28},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Determine a Suitable Velocity Texture Threshold","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"\n\nPlot a histogram of velocity texture to get a better idea of what values correspond to hydrometeors and what values of texture correspond to artifacts.\n\nIn the below example, a threshold of 3 would eliminate most of the peak corresponding to noise around 6 while preserving most of the values in the peak of ~0.5 corresponding to hydrometeors.\n\nhist, bins = np.histogram(radar.fields['texture']['data'],\n                          bins=150)\nbins = (bins[1:]+bins[:-1])/2.0\n\nplt.plot(bins,\n         hist,\n         label='Velocity Texture Frequency')\nplt.axvline(3,\n            color='r',\n            label='Proposed Velocity Texture Threshold')\n\nplt.xlabel('Velocity texture')\nplt.ylabel('Count')\nplt.legend()\n\n","type":"content","url":"/pyart-corrections#determine-a-suitable-velocity-texture-threshold","position":29},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Setup a Gatefilter Object and Apply our Threshold","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/pyart-corrections#setup-a-gatefilter-object-and-apply-our-threshold","position":30},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Setup a Gatefilter Object and Apply our Threshold","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"\n\nNow we can set up our GateFilter (\n\npyart.filters.GateFilter), which allows us to easily apply masks and filters to our radar object.\n\ngatefilter = pyart.filters.GateFilter(radar)\ngatefilter\n\nWe discovered that a velocity texture threshold of only including values below 3 would be suitable for this dataset, we use the .exclude_above method, specifying we want to exclude texture values above 3.\n\ngatefilter.exclude_above('texture', 3)\n\n","type":"content","url":"/pyart-corrections#setup-a-gatefilter-object-and-apply-our-threshold","position":31},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Filtered Data","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/pyart-corrections#plot-our-filtered-data","position":32},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Filtered Data","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"\n\nNow that we have created a gatefilter, filtering our data using the velocity texture, let’s plot our data!\n\nWe need to pass our gatefilter to the plot_ppi_map to apply it to our plot.\n\n# Plot our Unfiltered Data\nfig = plt.figure(figsize=[8, 10])\nax = plt.subplot(211, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('velocity',\n                     title='Raw Radial Velocity (no filter)',\n                     ax=ax,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-17,\n                     vmax=17,\n                     projection=ccrs.PlateCarree(),\n                     colorbar_label='Radial Velocity (m/s)',\n                     cmap='balance')\n\nax2 = plt.subplot(2,1,2,projection=ccrs.PlateCarree())\n\n# Plot our filtered data\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('velocity',\n                     title='Radial Velocity with Velocity Texture Filter',\n                     ax=ax2,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-17,\n                     vmax=17, \n                     projection=ccrs.PlateCarree(),\n                     colorbar_label='Radial Velocity (m/s)',\n                     gatefilter=gatefilter,\n                     cmap='balance')\nplt.show()\n\n","type":"content","url":"/pyart-corrections#plot-our-filtered-data","position":33},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Dealias the Velocity Using the Region-Based Method","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/pyart-corrections#dealias-the-velocity-using-the-region-based-method","position":34},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Dealias the Velocity Using the Region-Based Method","lvl2":"Dealiasing our Velocity"},"content":"\n\nAt this point, we can use the \n\ndealias_region_based to dealias the velocities and then add the new field to the radar!\n\nvelocity_dealiased = pyart.correct.dealias_region_based(radar,\n                                                        vel_field='velocity',\n                                                        nyquist_vel=nyquist_value,\n                                                        centered=True,\n                                                        gatefilter=gatefilter)\n\n# Add our data dictionary to the radar object\nradar.add_field('corrected_velocity', velocity_dealiased, replace_existing=True)\n\n","type":"content","url":"/pyart-corrections#dealias-the-velocity-using-the-region-based-method","position":35},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Cleaned, Dealiased Velocities","lvl3":"Dealias the Velocity Using the Region-Based Method","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/pyart-corrections#plot-our-cleaned-dealiased-velocities","position":36},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Cleaned, Dealiased Velocities","lvl3":"Dealias the Velocity Using the Region-Based Method","lvl2":"Dealiasing our Velocity"},"content":"\n\nPlot the new velocities, which now look much more realistic.\n\nfig = plt.figure(figsize=[8, 8])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('corrected_velocity',\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-30,\n                     vmax=30, \n                     projection=ccrs.PlateCarree(),\n                     colorbar_label='Radial Velocity (m/s)',\n                     cmap='balance',\n                     gatefilter=gatefilter)\nplt.show()\n\n","type":"content","url":"/pyart-corrections#plot-our-cleaned-dealiased-velocities","position":37},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Compare our Raw Velocity Field to our Dealiased, Cleaned Velocity Field"},"type":"lvl2","url":"/pyart-corrections#compare-our-raw-velocity-field-to-our-dealiased-cleaned-velocity-field","position":38},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Compare our Raw Velocity Field to our Dealiased, Cleaned Velocity Field"},"content":"As a last comparison, let’s compare our raw, uncorrected velocities with our cleaned velocities, after applying the velocity texture threshold and dealiasing algorithm\n\n# Plot our Unfiltered Data\nfig = plt.figure(figsize=[8, 10])\nax = plt.subplot(211, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('velocity',\n                     title='Raw Radial Velocity (no filter)',\n                     ax=ax,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-30,\n                     vmax=30,\n                     projection=ccrs.PlateCarree(),\n                     colorbar_label='Radial Velocity (m/s)',\n                     cmap='balance')\n\nax2 = plt.subplot(2,1,2,projection=ccrs.PlateCarree())\n\n# Plot our filtered, dealiased data\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('corrected_velocity',\n                     title='Radial Velocity with Velocity Texture Filter and Dealiasing',\n                     ax=ax2,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-30,\n                     vmax=30, \n                     projection=ccrs.PlateCarree(),\n                     gatefilter=gatefilter,\n                     colorbar_label='Radial Velocity (m/s)',\n                     cmap='balance')\nplt.show()\n\n","type":"content","url":"/pyart-corrections#compare-our-raw-velocity-field-to-our-dealiased-cleaned-velocity-field","position":39},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Conclusions"},"type":"lvl2","url":"/pyart-corrections#conclusions","position":40},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Conclusions"},"content":"Within this lesson, we walked through how to apply radial velocity corrections to a dataset, filtering based on the velocity texture and using a regional dealiasing algorithm.","type":"content","url":"/pyart-corrections#conclusions","position":41},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"What’s Next","lvl2":"Conclusions"},"type":"lvl3","url":"/pyart-corrections#whats-next","position":42},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"What’s Next","lvl2":"Conclusions"},"content":"In the next few notebooks, we walk through gridding radar data and advanced visualization methods!\n\n","type":"content","url":"/pyart-corrections#whats-next","position":43},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Resources and References"},"type":"lvl2","url":"/pyart-corrections#resources-and-references","position":44},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Resources and References"},"content":"Py-ART essentials links:\n\nLanding page\n\nExamples\n\nSource Code\n\nMailing list\n\nIssue Tracker","type":"content","url":"/pyart-corrections#resources-and-references","position":45},{"hierarchy":{"lvl1":"Py-ART Gridding"},"type":"lvl1","url":"/pyart-gridding","position":0},{"hierarchy":{"lvl1":"Py-ART Gridding"},"content":"\n\n","type":"content","url":"/pyart-gridding","position":1},{"hierarchy":{"lvl1":"Py-ART Gridding"},"type":"lvl1","url":"/pyart-gridding#py-art-gridding","position":2},{"hierarchy":{"lvl1":"Py-ART Gridding"},"content":"\n\n","type":"content","url":"/pyart-gridding#py-art-gridding","position":3},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Overview"},"type":"lvl2","url":"/pyart-gridding#overview","position":4},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nWhat is gridding and why is it important?\n\nAn overview of gridding with Py-ART\n\nHow to choose a gridding routine\n\nGridding multiple radars to the same grid\n\n","type":"content","url":"/pyart-gridding#overview","position":5},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Prerequisites"},"type":"lvl2","url":"/pyart-gridding#prerequisites","position":6},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nPy-ART Basics\n\nHelpful\n\nBasic features\n\nIntro to Cartopy\n\nHelpful\n\nBasic features\n\nMatplotlib Basics\n\nHelpful\n\nBasic plotting\n\nNumPy Basics\n\nHelpful\n\nBasic arrays\n\nTime to learn: 45 minutes\n\n","type":"content","url":"/pyart-gridding#prerequisites","position":7},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Imports"},"type":"lvl2","url":"/pyart-gridding#imports","position":8},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Imports"},"content":"\n\nimport os\nimport warnings\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\n\nimport pyart\nfrom pyart.testing import get_test_data\n\nwarnings.filterwarnings('ignore')\n\n","type":"content","url":"/pyart-gridding#imports","position":9},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"What is gridding and why is it important?"},"type":"lvl2","url":"/pyart-gridding#what-is-gridding-and-why-is-it-important","position":10},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"What is gridding and why is it important?"},"content":"\n\n","type":"content","url":"/pyart-gridding#what-is-gridding-and-why-is-it-important","position":11},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Antenna vs. Cartesian Coordinates","lvl2":"What is gridding and why is it important?"},"type":"lvl3","url":"/pyart-gridding#antenna-vs-cartesian-coordinates","position":12},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Antenna vs. Cartesian Coordinates","lvl2":"What is gridding and why is it important?"},"content":"Radar data, by default, is stored in a polar (or antenna) coordinate system, with the data coordinates stored as an angle (ranging from 0 to 360 degrees with 0 == North), and a radius from the radar, and an elevation which is the angle between the ground and the ground.\n\nThis format can be challenging to plot, since it is scan/radar specific. Also, it can make comparing with model data, which is on a lat/lon grid, challenging since one would need to transform the model daa cartesian coordinates to polar/antenna coordiantes.\n\nFortunately, PyART has a variety of gridding routines, which can be used to grid your data to a Cartesian grid. Once it is in this new grid, one can easily slice/dice the dataset, and compare to other data sources.","type":"content","url":"/pyart-gridding#antenna-vs-cartesian-coordinates","position":13},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Why is Gridding Important?","lvl2":"What is gridding and why is it important?"},"type":"lvl3","url":"/pyart-gridding#why-is-gridding-important","position":14},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Why is Gridding Important?","lvl2":"What is gridding and why is it important?"},"content":"Gridding is essential to combining multiple data sources (ex. multiple radars), and comparing to other data sources (ex. model data). There are also decisions that are made during the gridding process that have a large impact on the regridded data - for example:\n\nWhat resolution should my grid be?\n\nWhich interpolation routine should I use?\n\nHow smooth should my interpolated data be?\n\nWhile there is not always a right or wrong answer, it is important to understand the options available, and document which routine you used with your data! Also - experiment with different options and choose the best for your use case!\n\n","type":"content","url":"/pyart-gridding#why-is-gridding-important","position":15},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"An overview of gridding with Py-ART"},"type":"lvl2","url":"/pyart-gridding#an-overview-of-gridding-with-py-art","position":16},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"An overview of gridding with Py-ART"},"content":"Let’s dig into the regridding process with PyART!\n\n","type":"content","url":"/pyart-gridding#an-overview-of-gridding-with-py-art","position":17},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Read in and Visualize a Test Dataset","lvl2":"An overview of gridding with Py-ART"},"type":"lvl3","url":"/pyart-gridding#read-in-and-visualize-a-test-dataset","position":18},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Read in and Visualize a Test Dataset","lvl2":"An overview of gridding with Py-ART"},"content":"Let’s start with the same file used in the previous notebook (PyART Basics), which is a radar file from Northern Oklahoma.\n\nfile = get_test_data('swx_20120520_0641.nc')\nradar = pyart.io.read(file)\n\nLet’s plot up quick look of reflectivity, at the lowest elevation scan (closest to the ground)\n\nfig = plt.figure(figsize=[12, 12])\ndisplay = pyart.graph.RadarDisplay(radar)\ndisplay.plot_ppi('corrected_reflectivity_horizontal',\n                 cmap='HomeyerRainbow')\n\nAs mentioned before, the dataset is currently in the antenna coordinate system measured as distance from the radar\n\n","type":"content","url":"/pyart-gridding#read-in-and-visualize-a-test-dataset","position":19},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Setup our Gridding Routine with pyart.map.grid_from_radars()","lvl2":"An overview of gridding with Py-ART"},"type":"lvl3","url":"/pyart-gridding#setup-our-gridding-routine-with-pyart-map-grid-from-radars","position":20},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Setup our Gridding Routine with pyart.map.grid_from_radars()","lvl2":"An overview of gridding with Py-ART"},"content":"Py-ART has the \n\nGrid object which has characteristics similar to that of the \n\nRadar object, except that the data are stored in Cartesian coordinates instead of the radar’s antenna coordinates.\n\npyart.core.Grid?\n\nWe can transform our data into this grid object, from the radars, using pyart.map.grid_from_radars().\n\nBeforing gridding our data, we need to make a decision about the desired grid resolution and extent. For example, one might imagine a grid configuration of:\n\nGrid extent/limits\n\n20 km in the x-direction (north/south)\n\n20 km in the y-direction (west/east)\n\n15 km in the z-direction (vertical)\n\n500 m spatial resolution\n\nThe pyart.map.grid_from_radars() function takes the grid shape and grid limits as input, with the order (z, y, x).\n\nLet’s setup our configuration, setting our grid extent first, with the distance measured in meters\n\nz_grid_limits = (500.,15_000.)\ny_grid_limits = (-20_000.,20_000.)\nx_grid_limits = (-20_000.,20_000.)\n\nNow that we have our grid limits, we can set our desired resolution (again, in meters)\n\ngrid_resolution = 500\n\nLet’s compute our grid shape - using the extent and resolution to compute the number of grid points in each direction.\n\ndef compute_number_of_points(extent, resolution):\n    return int((extent[1] - extent[0])/resolution)\n\nNow that we have a helper function to compute this, let’s apply it to our vertical dimension\n\nz_grid_points = compute_number_of_points(z_grid_limits, grid_resolution)\nz_grid_points\n\nWe can apply this to the horizontal (x, y) dimensions as well.\n\nx_grid_points = compute_number_of_points(x_grid_limits, grid_resolution)\ny_grid_points = compute_number_of_points(y_grid_limits, grid_resolution)\n\nprint(z_grid_points,\n      y_grid_points,\n      x_grid_points)\n\n","type":"content","url":"/pyart-gridding#setup-our-gridding-routine-with-pyart-map-grid-from-radars","position":21},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl4":"Use our configuration to grid the data!","lvl3":"Setup our Gridding Routine with pyart.map.grid_from_radars()","lvl2":"An overview of gridding with Py-ART"},"type":"lvl4","url":"/pyart-gridding#use-our-configuration-to-grid-the-data","position":22},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl4":"Use our configuration to grid the data!","lvl3":"Setup our Gridding Routine with pyart.map.grid_from_radars()","lvl2":"An overview of gridding with Py-ART"},"content":"Now that we have the grid shape and grid limits, let’s grid up our radar!\n\ngrid = pyart.map.grid_from_radars(radar,\n                                  grid_shape=(z_grid_points,\n                                              y_grid_points,\n                                              x_grid_points),\n                                  grid_limits=(z_grid_limits,\n                                               y_grid_limits,\n                                               x_grid_limits),\n                                 )\ngrid\n\nWe now have a pyart.core.Grid object!\n\n","type":"content","url":"/pyart-gridding#use-our-configuration-to-grid-the-data","position":23},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Plot up the Grid Object","lvl2":"An overview of gridding with Py-ART"},"type":"lvl3","url":"/pyart-gridding#plot-up-the-grid-object","position":24},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"Plot up the Grid Object","lvl2":"An overview of gridding with Py-ART"},"content":"","type":"content","url":"/pyart-gridding#plot-up-the-grid-object","position":25},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl4":"Plot a horizontal view of the data","lvl3":"Plot up the Grid Object","lvl2":"An overview of gridding with Py-ART"},"type":"lvl4","url":"/pyart-gridding#plot-a-horizontal-view-of-the-data","position":26},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl4":"Plot a horizontal view of the data","lvl3":"Plot up the Grid Object","lvl2":"An overview of gridding with Py-ART"},"content":"We can use the GridMapDisplay from pyart.graph to visualize our regridded data, starting with a horizontal view (slice along a single vertical level)\n\ndisplay = pyart.graph.GridMapDisplay(grid)\ndisplay.plot_grid('corrected_reflectivity_horizontal',\n                  level=0,\n                  vmin=-20,\n                  vmax=60,\n                  cmap='HomeyerRainbow')\n\n","type":"content","url":"/pyart-gridding#plot-a-horizontal-view-of-the-data","position":27},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl4":"Plot a Latitudinal Slice","lvl3":"Plot up the Grid Object","lvl2":"An overview of gridding with Py-ART"},"type":"lvl4","url":"/pyart-gridding#plot-a-latitudinal-slice","position":28},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl4":"Plot a Latitudinal Slice","lvl3":"Plot up the Grid Object","lvl2":"An overview of gridding with Py-ART"},"content":"\n\nWe can also slice through a single latitude or longitude!\n\ndisplay.plot_latitude_slice('corrected_reflectivity_horizontal',\n                            lat=36.5,\n                            vmin=-20,\n                            vmax=60,\n                            cmap='HomeyerRainbow')\nplt.xlim([-20, 20]);\n\n","type":"content","url":"/pyart-gridding#plot-a-latitudinal-slice","position":29},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl4":"Plot with Xarray","lvl3":"Plot up the Grid Object","lvl2":"An overview of gridding with Py-ART"},"type":"lvl4","url":"/pyart-gridding#plot-with-xarray","position":30},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl4":"Plot with Xarray","lvl3":"Plot up the Grid Object","lvl2":"An overview of gridding with Py-ART"},"content":"\n\nAnother neat feature of the Grid object is that we can transform it to an xarray.Dataset!\n\nds = grid.to_xarray()\nds\n\nNow, our plotting routine is a one-liner, starting with the horizontal slice:\n\nds.isel(z=0).corrected_reflectivity_horizontal.plot(cmap='HomeyerRainbow',\n                                                    vmin=-20,\n                                                    vmax=60);\n\nAnd a vertical slice at a given y dimension (latitude)\n\nds.sel(y=1300,\n       method='nearest').corrected_reflectivity_horizontal.plot(cmap='HomeyerRainbow',\n                                                                vmin=-20,\n                                                                vmax=60);\n\n","type":"content","url":"/pyart-gridding#plot-with-xarray","position":31},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Summary"},"type":"lvl2","url":"/pyart-gridding#summary","position":32},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Summary"},"content":"Within this notebook, we covered the basics of gridding radar data using pyart, including:\n\nWhat we mean by gridding and why is it matters\n\nConfiguring your gridding routine\n\nVisualize gridded radar data","type":"content","url":"/pyart-gridding#summary","position":33},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"What’s Next","lvl2":"Summary"},"type":"lvl3","url":"/pyart-gridding#whats-next","position":34},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl3":"What’s Next","lvl2":"Summary"},"content":"In the next few notebooks, we walk through applying data cleaning methods, and advanced visualization methods!\n\n","type":"content","url":"/pyart-gridding#whats-next","position":35},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Resources and References"},"type":"lvl2","url":"/pyart-gridding#resources-and-references","position":36},{"hierarchy":{"lvl1":"Py-ART Gridding","lvl2":"Resources and References"},"content":"Py-ART essentials links:\n\nLanding page\n\nExamples\n\nSource Code\n\nMailing list\n\nIssue Tracker","type":"content","url":"/pyart-gridding#resources-and-references","position":37},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in Project Pythia’s Radar Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/how-to-cite","position":1},{"hierarchy":{"lvl1":"The Basics of Weather Radar"},"type":"lvl1","url":"/radar-basics","position":0},{"hierarchy":{"lvl1":"The Basics of Weather Radar"},"content":" Clip Source: National Weather Service\n\n","type":"content","url":"/radar-basics","position":1},{"hierarchy":{"lvl1":"The Basics of Weather Radar"},"type":"lvl1","url":"/radar-basics#the-basics-of-weather-radar","position":2},{"hierarchy":{"lvl1":"The Basics of Weather Radar"},"content":"\n\n\n\n","type":"content","url":"/radar-basics#the-basics-of-weather-radar","position":3},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Overview"},"type":"lvl2","url":"/radar-basics#overview","position":4},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nHow do weather radars work?\n\nDoppler Radar\n\nEmmitted Energy\n\nDual-Polarization\n\nFundamental Radar Products\n\nBase Reflectivity & Composite Reflectivity\n\nBase Velocity & Storm Relative Velocity\n\nEcho Tops\n\nCorrelation Coefficient\n\nDifferential Reflectivity\n\nArtifacts in Radar Data\n\nClutter\n\nThree-Body Scatter Spike (TBSS)\n\nVelocity Alisiasing\n\n","type":"content","url":"/radar-basics#overview","position":5},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Prerequisites"},"type":"lvl2","url":"/radar-basics#prerequisites","position":6},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nIntroduction to Meteorology\n\nHelpful\n\nBasic concepts of meteorology\n\nIntroduction to Imagery & Remote Sening\n\nHelpful\n\nIntro concepts of remote sensing\n\nTime to learn: ~ 3 hours\n\n\n\n","type":"content","url":"/radar-basics#prerequisites","position":7},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"How do weather radars work?"},"type":"lvl2","url":"/radar-basics#how-do-weather-radars-work","position":8},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"How do weather radars work?"},"content":"\n\n Image Source: Sundry Photography/Public domain\n\n","type":"content","url":"/radar-basics#how-do-weather-radars-work","position":9},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Doppler Radar","lvl2":"How do weather radars work?"},"type":"lvl3","url":"/radar-basics#doppler-radar","position":10},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Doppler Radar","lvl2":"How do weather radars work?"},"content":"\n\nTo work with radar data as a software engineer, atmospheric scientist, operational meteorologist, or in many other positions, knowledge of radar is paramount. So, how do weather radars work? Let’s start with the basics. Radar stands for RAdio Detection and Ranging, and it is an electronic instrument used for the detection and ranging of distant objects that scatter or reflect radio energy emmitted by the radar. A Doppler radar is a radar that detects and interprets the Doppler Effect in terms of the radial velocity (speed towards or away from the radar) of a target.\n\n","type":"content","url":"/radar-basics#doppler-radar","position":11},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Emmitted Energy","lvl2":"How do weather radars work?"},"type":"lvl3","url":"/radar-basics#emmitted-energy","position":12},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Emmitted Energy","lvl2":"How do weather radars work?"},"content":"\n\n\nClip Source: The COMET Program\n\nDoppler radar sends out energy in pulses and listens for any returned signal.\n\n","type":"content","url":"/radar-basics#emmitted-energy","position":13},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Dual-Polarization","lvl2":"How do weather radars work?"},"type":"lvl3","url":"/radar-basics#dual-polarization","position":14},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Dual-Polarization","lvl2":"How do weather radars work?"},"content":"\n\n","type":"content","url":"/radar-basics#dual-polarization","position":15},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Fundamental Radar Products"},"type":"lvl2","url":"/radar-basics#fundamental-radar-products","position":16},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Fundamental Radar Products"},"content":"\n\n","type":"content","url":"/radar-basics#fundamental-radar-products","position":17},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Base Reflectivity & Composite Reflectivity","lvl2":"Fundamental Radar Products"},"type":"lvl3","url":"/radar-basics#base-reflectivity-composite-reflectivity","position":18},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Base Reflectivity & Composite Reflectivity","lvl2":"Fundamental Radar Products"},"content":"\n\n","type":"content","url":"/radar-basics#base-reflectivity-composite-reflectivity","position":19},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Base Velocity & Storm Relative Velocity","lvl2":"Fundamental Radar Products"},"type":"lvl3","url":"/radar-basics#base-velocity-storm-relative-velocity","position":20},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Base Velocity & Storm Relative Velocity","lvl2":"Fundamental Radar Products"},"content":"\n\n","type":"content","url":"/radar-basics#base-velocity-storm-relative-velocity","position":21},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Echo Tops","lvl2":"Fundamental Radar Products"},"type":"lvl3","url":"/radar-basics#echo-tops","position":22},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Echo Tops","lvl2":"Fundamental Radar Products"},"content":"\n\n","type":"content","url":"/radar-basics#echo-tops","position":23},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Correlation Coefficient","lvl2":"Fundamental Radar Products"},"type":"lvl3","url":"/radar-basics#correlation-coefficient","position":24},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Correlation Coefficient","lvl2":"Fundamental Radar Products"},"content":"\n\n","type":"content","url":"/radar-basics#correlation-coefficient","position":25},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Differential Reflectivity","lvl2":"Fundamental Radar Products"},"type":"lvl3","url":"/radar-basics#differential-reflectivity","position":26},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Differential Reflectivity","lvl2":"Fundamental Radar Products"},"content":"\n\n","type":"content","url":"/radar-basics#differential-reflectivity","position":27},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Artifacts in Radar Data"},"type":"lvl2","url":"/radar-basics#artifacts-in-radar-data","position":28},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Artifacts in Radar Data"},"content":"\n\n","type":"content","url":"/radar-basics#artifacts-in-radar-data","position":29},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Clutter","lvl2":"Artifacts in Radar Data"},"type":"lvl3","url":"/radar-basics#clutter","position":30},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Clutter","lvl2":"Artifacts in Radar Data"},"content":"\n\n","type":"content","url":"/radar-basics#clutter","position":31},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Three-Body Scatter Spike (TBSS)","lvl2":"Artifacts in Radar Data"},"type":"lvl3","url":"/radar-basics#three-body-scatter-spike-tbss","position":32},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Three-Body Scatter Spike (TBSS)","lvl2":"Artifacts in Radar Data"},"content":"\n\n","type":"content","url":"/radar-basics#three-body-scatter-spike-tbss","position":33},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Velocity Aliasing","lvl2":"Artifacts in Radar Data"},"type":"lvl3","url":"/radar-basics#velocity-aliasing","position":34},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl3":"Velocity Aliasing","lvl2":"Artifacts in Radar Data"},"content":"\n\n\n\n","type":"content","url":"/radar-basics#velocity-aliasing","position":35},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Summary"},"type":"lvl2","url":"/radar-basics#summary","position":36},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Summary"},"content":"In this cookbook we have discussed the basics of weather radars including the common products that meteorologists use to issue forecasts and warnings.\n\n","type":"content","url":"/radar-basics#summary","position":37},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Additional Learning Resources"},"type":"lvl2","url":"/radar-basics#additional-learning-resources","position":38},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"Additional Learning Resources"},"content":"COMET MetEd Modules\n\nNOAA JetStream\n\nProject Pythia\n\nUnidata Learning Resources\n\n","type":"content","url":"/radar-basics#additional-learning-resources","position":39},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"References"},"type":"lvl2","url":"/radar-basics#references","position":40},{"hierarchy":{"lvl1":"The Basics of Weather Radar","lvl2":"References"},"content":"COMET MetEd\n\nNational Oceanic and Atmospheric Administration (NOAA)\n\nUniversity Corporation for Atmospheric Research (UCAR)\n\nNational Center for Atmospheric Research (NCAR)\n\nUnidata\n\nNational Weather Service (NWS)\n\nAmerican Meteorological Society Glossary of Meteorology","type":"content","url":"/radar-basics#references","position":41}]}